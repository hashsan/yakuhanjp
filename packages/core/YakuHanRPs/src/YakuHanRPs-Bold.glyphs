{
.appVersion = "3151";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = "M+  ";
},
{
name = panose;
value = (
2,
11,
7,
2,
2,
2,
3,
2,
2,
7
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
11,
24,
29,
30,
31,
32,
33,
35,
36,
37,
38,
39,
40,
42,
43,
44,
45,
46,
47,
48,
49,
50,
54,
57,
59,
61,
62,
65,
68,
89
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1253",
"1254",
"1255",
"1257",
"1258",
"932",
"950",
"bit 29",
"bit 30",
"869",
"866",
"865",
"863",
"862",
"861",
"860",
"857",
"855",
"852",
"775",
"737",
"850",
"437"
);
},
{
name = fsType;
value = (
);
}
);
date = "2015-05-28 17:06:34 +0000";
familyName = "Yaku Han RP s";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature vert;
feature vrt2;
";
tag = aalt;
},
{
automatic = 1;
code = "sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vert;
},
{
automatic = 1;
code = "sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vrt2;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 860;
},
{
name = typoDescender;
value = -140;
},
{
name = typoLineGap;
value = 90;
},
{
name = winAscent;
value = 1075;
},
{
name = winDescent;
value = 320;
},
{
name = hheaAscender;
value = 1075;
},
{
name = hheaDescender;
value = -320;
},
{
name = strikeoutPosition;
value = 258;
},
{
name = strikeoutSize;
value = 49;
},
{
name = "prep Table Assembly";
value = "PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SCANTYPE[ ]	/* ScanType */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01270 6 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012EIF[ ]	/* EndIf */\012SCVTCI[ ]	/* SetCVTCutIn */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP0[ ]	/* SetZonePointer0 */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01274 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012MIAP[1]	/* MoveIndirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10100]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012ROUND[01]	/* Round */\012RTG[ ]	/* RoundToGrid */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ROFF[ ]	/* RoundOff */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012IF[ ]	/* If */\012MIRP[11101]	/* MoveIndirectRelPt */\012ELSE[ ]	/* Else */\012MIRP[01101]	/* MoveIndirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01270 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012GFV[ ]	/* GetFVector */\012NOT[ ]	/* LogicalNot */\012AND[ ]	/* LogicalAnd */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01234 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012MDRP[00100]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012ELSE[ ]	/* Else */\012SRP0[ ]	/* SetRefPoint0 */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012NEG[ ]	/* Negate */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012MDRP[10110]	/* MoveDirectRelPt */\012RTG[ ]	/* RoundToGrid */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[0]	/* MeasureDistance */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SPVTL[1]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012MDRP[00000]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 64 1 64 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0120 32 0 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0121 32 1 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01225 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    \"-220\",\012    0,\012    520,\012    730,\012    750,\012    33,\012    633\012)";
}
);
iconName = Bold;
id = m01;
metricValues = (
{
pos = 860;
},
{
},
{
pos = -140;
},
{
}
);
name = Bold;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2023-08-27 07:23:23 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 364;
}
);
note = ".notdef";
},
{
glyphname = space;
lastChange = "2023-08-27 07:23:23 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 284;
}
);
note = space;
unicode = 32;
},
{
glyphname = nbspace;
lastChange = "2023-08-27 07:23:23 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 284;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = angleLeft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,-170,o),
(508,-170,qs),
(531,-170,ls),
(550,-170,o),
(569,-137,o),
(560,-121,qs),
(326,293,ls),
(322,300,o),
(326,307,qs),
(560,721,ls),
(569,737,o),
(550,770,o),
(531,770,qs),
(508,770,ls),
(481,770,o),
(435,743,o),
(423,721,qs),
(213,349,ls),
(200,326,o),
(200,274,o),
(213,251,qs),
(423,-121,ls),
(435,-143,o)
);
}
);
vertWidth = 1000;
width = 598;
}
);
note = angleleft;
unicode = 9001;
},
{
glyphname = angleRight;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,-170,o),
(67,-170,qs),
(90,-170,ls),
(116,-170,o),
(162,-143,o),
(175,-121,qs),
(385,251,ls),
(398,274,o),
(398,326,o),
(385,349,qs),
(175,721,ls),
(162,743,o),
(116,770,o),
(90,770,qs),
(67,770,ls),
(48,770,o),
(29,737,o),
(38,721,qs),
(272,307,ls),
(276,300,o),
(272,293,qs),
(38,-121,ls),
(29,-137,o)
);
}
);
vertWidth = 1000;
width = 598;
}
);
note = angleright;
unicode = 9002;
},
{
glyphname = anglebracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(510,-110,qs),
(533,-110,ls),
(552,-110,o),
(571,-77,o),
(562,-61,qs),
(327,353,ls),
(323,360,o),
(327,367,qs),
(562,781,ls),
(571,797,o),
(552,830,o),
(533,830,qs),
(510,830,ls),
(453,830,o),
(425,781,qs),
(214,409,ls),
(186,360,o),
(214,311,qs),
(425,-61,ls),
(453,-110,o)
);
}
);
vertWidth = 1000;
width = 683;
}
);
note = uni3008;
unicode = 12296;
},
{
glyphname = anglebracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,830,o),
(112,797,o),
(121,781,qs),
(356,367,ls),
(360,360,o),
(356,353,qs),
(121,-61,ls),
(112,-77,o),
(131,-110,o),
(150,-110,qs),
(173,-110,ls),
(230,-110,o),
(258,-61,qs),
(469,311,ls),
(497,360,o),
(469,409,qs),
(258,781,ls),
(230,830,o),
(173,830,qs),
(150,830,ls)
);
}
);
vertWidth = 1000;
width = 683;
}
);
note = uni3009;
unicode = 12297;
},
{
glyphname = blacklenticularbracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,-110,o),
(488,-80,o),
(477,-68,qs),
(400,21,o),
(317,243,o),
(317,477,o),
(400,699,o),
(477,788,qs),
(488,800,o),
(476,830,o),
(460,830,qs),
(257,830,ls),
(234,830,o),
(200,796,o),
(200,773,qs),
(200,-53,ls),
(200,-76,o),
(234,-110,o),
(257,-110,qs),
(460,-110,ls)
);
}
);
vertWidth = 1000;
width = 610;
}
);
note = uni3010;
unicode = 12304;
},
{
glyphname = blacklenticularbracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,-110,o),
(410,-76,o),
(410,-53,qs),
(410,773,ls),
(410,796,o),
(376,830,o),
(353,830,qs),
(150,830,ls),
(134,830,o),
(122,800,o),
(133,788,qs),
(210,699,o),
(293,477,o),
(293,243,o),
(210,21,o),
(133,-68,qs),
(122,-80,o),
(134,-110,o),
(150,-110,qs),
(353,-110,ls)
);
}
);
vertWidth = 1000;
width = 610;
}
);
note = uni3011;
unicode = 12305;
},
{
glyphname = braceleft.full;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,458,o),
(480,523,qs),
(480,633,ls),
(480,699,o),
(514,733,o),
(573,733,qs),
(648,733,ls),
(668,733,o),
(696,762,o),
(696,802,o),
(668,830,o),
(648,830,qs),
(510,830,ls),
(428,830,o),
(356,756,o),
(356,670,qs),
(356,528,ls),
(356,466,o),
(315,412,o),
(270,412,qs),
(251,412,ls),
(229,412,o),
(200,382,o),
(200,338,o),
(229,308,o),
(251,308,qs),
(270,308,ls),
(315,308,o),
(356,254,o),
(356,192,qs),
(356,50,ls),
(356,-36,o),
(428,-110,o),
(510,-110,qs),
(648,-110,ls),
(668,-110,o),
(696,-82,o),
(696,-42,o),
(668,-13,o),
(648,-13,qs),
(573,-13,ls),
(514,-13,o),
(480,21,o),
(480,87,qs),
(480,197,ls),
(480,262,o),
(433,335,o),
(378,358,q),
(376,358,o),
(376,362,o),
(378,362,q),
(433,385,o)
);
}
);
vertWidth = 1000;
width = 808;
}
);
note = uniFF5B;
unicode = 65371;
},
{
glyphname = braceright.full;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,262,o),
(328,197,qs),
(328,87,ls),
(328,21,o),
(294,-13,o),
(235,-13,qs),
(160,-13,ls),
(140,-13,o),
(112,-42,o),
(112,-82,o),
(140,-110,o),
(160,-110,qs),
(298,-110,ls),
(380,-110,o),
(452,-36,o),
(452,50,qs),
(452,192,ls),
(452,254,o),
(493,308,o),
(538,308,qs),
(557,308,ls),
(579,308,o),
(608,338,o),
(608,382,o),
(579,412,o),
(557,412,qs),
(538,412,ls),
(493,412,o),
(452,466,o),
(452,528,qs),
(452,670,ls),
(452,756,o),
(380,830,o),
(298,830,qs),
(160,830,ls),
(140,830,o),
(112,802,o),
(112,762,o),
(140,733,o),
(160,733,qs),
(235,733,ls),
(294,733,o),
(328,699,o),
(328,633,qs),
(328,523,ls),
(328,458,o),
(375,385,o),
(430,362,q),
(432,362,o),
(432,358,o),
(430,358,q),
(375,335,o)
);
}
);
vertWidth = 1000;
width = 808;
}
);
note = uniFF5D;
unicode = 65373;
},
{
glyphname = cornerbracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,63,o),
(327,97,o),
(327,120,qs),
(327,711,ls),
(327,720,o),
(335,720,qs),
(563,720,ls),
(585,720,o),
(617,751,o),
(617,795,o),
(585,827,o),
(563,827,qs),
(257,827,ls),
(234,827,o),
(200,793,o),
(200,770,qs),
(200,120,ls),
(200,97,o),
(234,63,o),
(257,63,qs),
(270,63,ls)
);
}
);
vertWidth = 1000;
width = 680;
}
);
note = uni300C;
unicode = 12300;
},
{
glyphname = cornerbracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,-107,o),
(480,-73,o),
(480,-50,qs),
(480,600,ls),
(480,623,o),
(446,657,o),
(423,657,qs),
(410,657,ls),
(387,657,o),
(353,623,o),
(353,600,qs),
(353,9,ls),
(353,0,o),
(345,0,qs),
(117,0,ls),
(95,0,o),
(63,-31,o),
(63,-75,o),
(95,-107,o),
(117,-107,qs),
(423,-107,ls)
);
}
);
vertWidth = 1000;
width = 680;
}
);
note = uni300D;
unicode = 12301;
},
{
glyphname = dblanglebracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(650,-110,o),
(706,-110,qs),
(723,-110,ls),
(742,-110,o),
(761,-77,o),
(752,-61,qs),
(517,353,ls),
(513,360,o),
(517,367,qs),
(752,781,ls),
(761,797,o),
(742,830,o),
(723,830,qs),
(706,830,ls),
(650,830,o),
(622,781,qs),
(411,409,ls),
(383,360,o),
(411,311,qs),
(622,-61,ls)
);
},
{
closed = 1;
nodes = (
(510,-110,qs),
(526,-110,ls),
(545,-110,o),
(564,-77,o),
(555,-61,qs),
(321,353,ls),
(317,360,o),
(321,367,qs),
(555,781,ls),
(564,797,o),
(545,830,o),
(526,830,qs),
(510,830,ls),
(453,830,o),
(425,781,qs),
(214,409,ls),
(186,360,o),
(214,311,qs),
(425,-61,ls),
(453,-110,o)
);
}
);
vertWidth = 1000;
width = 873;
}
);
note = uni300A;
unicode = 12298;
},
{
glyphname = dblanglebracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,-110,o),
(150,-110,qs),
(167,-110,ls),
(223,-110,o),
(251,-61,qs),
(462,311,ls),
(490,360,o),
(462,409,qs),
(251,781,ls),
(223,830,o),
(167,830,qs),
(150,830,ls),
(131,830,o),
(112,797,o),
(121,781,qs),
(356,367,ls),
(360,360,o),
(356,353,qs),
(121,-61,ls),
(112,-77,o)
);
},
{
closed = 1;
nodes = (
(328,830,o),
(309,797,o),
(318,781,qs),
(552,367,ls),
(556,360,o),
(552,353,qs),
(318,-61,ls),
(309,-77,o),
(328,-110,o),
(347,-110,qs),
(363,-110,ls),
(420,-110,o),
(448,-61,qs),
(659,311,ls),
(687,360,o),
(659,409,qs),
(448,781,ls),
(420,830,o),
(363,830,qs),
(347,830,ls)
);
}
);
vertWidth = 1000;
width = 873;
}
);
note = uni300B;
unicode = 12299;
},
{
glyphname = tortoiseshellbracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,-106,o),
(594,-84,o),
(594,-65,qs),
(594,-43,o),
(566,-7,o),
(545,-1,qs),
(332,62,ls),
(324,64,o),
(324,73,qs),
(324,647,ls),
(324,656,o),
(332,658,qs),
(545,721,ls),
(566,727,o),
(594,763,o),
(594,785,qs),
(594,804,o),
(563,826,o),
(545,821,qs),
(255,737,ls),
(231,730,o),
(200,690,o),
(200,665,qs),
(200,55,ls),
(200,30,o),
(231,-10,o),
(255,-17,qs),
(545,-101,ls)
);
}
);
vertWidth = 1000;
width = 712;
}
);
note = uni3014;
unicode = 12308;
},
{
glyphname = tortoiseshellbracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-7,o),
(118,-43,o),
(118,-65,qs),
(118,-84,o),
(149,-106,o),
(167,-101,qs),
(457,-17,ls),
(481,-10,o),
(512,30,o),
(512,55,qs),
(512,665,ls),
(512,690,o),
(481,730,o),
(457,737,qs),
(167,821,ls),
(149,826,o),
(118,804,o),
(118,785,qs),
(118,763,o),
(146,727,o),
(167,721,qs),
(380,658,ls),
(388,656,o),
(388,647,qs),
(388,73,ls),
(388,64,o),
(380,62,qs),
(167,-1,ls)
);
}
);
vertWidth = 1000;
width = 712;
}
);
note = uni3015;
unicode = 12309;
},
{
glyphname = whitecornerbracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,753,qs),
(578,753,ls),
(586,753,o),
(586,745,qs),
(586,685,ls),
(586,677,o),
(578,677,qs),
(406,677,ls),
(383,677,o),
(350,643,o),
(350,620,qs),
(350,102,ls),
(350,93,o),
(341,93,qs),
(282,93,ls),
(273,93,o),
(273,102,qs),
(273,745,ls),
(273,753,o)
);
},
{
closed = 1;
nodes = (
(366,20,ls),
(389,20,o),
(423,54,o),
(423,77,qs),
(423,595,ls),
(423,603,o),
(432,603,qs),
(603,603,ls),
(626,603,o),
(660,637,o),
(660,660,qs),
(660,770,ls),
(660,793,o),
(626,827,o),
(603,827,qs),
(256,827,ls),
(233,827,o),
(200,793,o),
(200,770,qs),
(200,77,ls),
(200,54,o),
(233,20,o),
(256,20,qs),
(273,20,l)
);
}
);
vertWidth = 1000;
width = 723;
}
);
note = uni300E;
unicode = 12302;
},
{
glyphname = whitecornerbracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(145,43,qs),
(317,43,ls),
(340,43,o),
(373,77,o),
(373,100,qs),
(373,618,ls),
(373,627,o),
(382,627,qs),
(442,627,ls),
(450,627,o),
(450,618,qs),
(450,-25,ls),
(450,-33,o),
(442,-33,qs),
(145,-33,ls),
(137,-33,o),
(137,-25,qs),
(137,35,ls),
(137,43,o)
);
},
{
closed = 1;
nodes = (
(490,-107,o),
(523,-73,o),
(523,-50,qs),
(523,643,ls),
(523,666,o),
(490,700,o),
(467,700,qs),
(450,700,l),
(357,700,ls),
(334,700,o),
(300,666,o),
(300,643,qs),
(300,125,ls),
(300,117,o),
(291,117,qs),
(120,117,ls),
(97,117,o),
(63,83,o),
(63,60,qs),
(63,-50,ls),
(63,-73,o),
(97,-107,o),
(120,-107,qs),
(467,-107,ls)
);
}
);
vertWidth = 1000;
width = 723;
}
);
note = uni300F;
unicode = 12303;
},
{
glyphname = whitelenticularbracketleft;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,757,qs),
(441,757,ls),
(444,757,o),
(447,752,o),
(445,750,q),
(336,569,o),
(336,151,o),
(445,-30,q),
(447,-32,o),
(444,-37,o),
(441,-37,qs),
(282,-37,ls),
(273,-37,o),
(273,-28,qs),
(273,748,ls),
(273,757,o)
);
},
{
closed = 1;
nodes = (
(549,-110,o),
(564,-80,o),
(553,-67,qs),
(484,22,o),
(410,243,o),
(410,477,o),
(484,698,o),
(553,787,qs),
(564,800,o),
(549,830,o),
(533,830,qs),
(256,830,ls),
(233,830,o),
(200,796,o),
(200,773,qs),
(200,-53,ls),
(200,-76,o),
(233,-110,o),
(256,-110,qs),
(533,-110,ls)
);
}
);
vertWidth = 1000;
width = 683;
}
);
note = uni3016;
unicode = 12310;
},
{
glyphname = whitelenticularbracketright;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,569,o),
(238,750,q),
(236,752,o),
(239,757,o),
(242,757,qs),
(402,757,ls),
(410,757,o),
(410,748,qs),
(410,-28,ls),
(410,-37,o),
(402,-37,qs),
(242,-37,ls),
(239,-37,o),
(236,-32,o),
(238,-30,q),
(347,151,o)
);
},
{
closed = 1;
nodes = (
(450,-110,o),
(483,-76,o),
(483,-53,qs),
(483,773,ls),
(483,796,o),
(450,830,o),
(427,830,qs),
(150,830,ls),
(134,830,o),
(119,800,o),
(130,787,qs),
(199,698,o),
(273,477,o),
(273,243,o),
(199,22,o),
(130,-67,qs),
(119,-80,o),
(134,-110,o),
(150,-110,qs),
(427,-110,ls)
);
}
);
vertWidth = 1000;
width = 683;
}
);
note = uni3017;
unicode = 12311;
},
{
glyphname = anglebracketleft.vert;
lastChange = "2023-08-28 01:23:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,350,qs),
(30,327,ls),
(30,308,o),
(63,289,o),
(79,298,qs),
(493,533,ls),
(500,537,o),
(507,533,qs),
(921,298,ls),
(937,289,o),
(970,308,o),
(970,327,qs),
(970,350,ls),
(970,407,o),
(921,435,qs),
(549,646,ls),
(500,674,o),
(451,646,qs),
(79,435,ls),
(30,407,o)
);
}
);
vertWidth = 683;
width = 1000;
}
);
note = glyph08468;
},
{
glyphname = anglebracketright.vert;
lastChange = "2023-08-28 01:23:53 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(970,729,o),
(937,748,o),
(921,739,qs),
(507,504,ls),
(500,500,o),
(493,504,qs),
(79,739,ls),
(63,748,o),
(30,729,o),
(30,710,qs),
(30,687,ls),
(30,630,o),
(79,602,qs),
(451,391,ls),
(500,363,o),
(549,391,qs),
(921,602,ls),
(970,630,o),
(970,687,qs),
(970,710,ls)
);
}
);
vertWidth = 683;
width = 1000;
}
);
note = glyph08469;
},
{
glyphname = blacklenticularbracketleft.vert;
lastChange = "2023-08-28 01:23:58 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,384,o),
(60,372,o),
(72,383,qs),
(161,460,o),
(383,543,o),
(617,543,o),
(839,460,o),
(928,383,qs),
(940,372,o),
(970,384,o),
(970,400,qs),
(970,603,ls),
(970,626,o),
(936,660,o),
(913,660,qs),
(87,660,ls),
(64,660,o),
(30,626,o),
(30,603,qs),
(30,400,ls)
);
}
);
vertWidth = 610;
width = 1000;
}
);
note = glyph08476;
},
{
glyphname = blacklenticularbracketright.vert;
lastChange = "2023-08-28 01:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,484,o),
(64,450,o),
(87,450,qs),
(913,450,ls),
(936,450,o),
(970,484,o),
(970,507,qs),
(970,710,ls),
(970,726,o),
(940,738,o),
(928,727,qs),
(839,650,o),
(617,567,o),
(383,567,o),
(161,650,o),
(72,727,qs),
(60,738,o),
(30,726,o),
(30,710,qs),
(30,507,ls)
);
}
);
vertWidth = 610;
width = 1000;
}
);
note = glyph08477;
},
{
glyphname = bracketleft.full;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,-110,o),
(594,-82,o),
(594,-42,o),
(565,-13,o),
(545,-13,qs),
(332,-13,ls),
(324,-13,o),
(324,-5,qs),
(324,725,ls),
(324,733,o),
(332,733,qs),
(545,733,ls),
(565,733,o),
(594,762,o),
(594,802,o),
(565,830,o),
(545,830,qs),
(257,830,ls),
(234,830,o),
(200,796,o),
(200,773,qs),
(200,-53,ls),
(200,-76,o),
(234,-110,o),
(257,-110,qs),
(545,-110,ls)
);
}
);
vertWidth = 1000;
width = 712;
}
);
note = uniFF3B;
unicode = 65339;
},
{
glyphname = bracketright.full;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,-13,o),
(118,-42,o),
(118,-82,o),
(147,-110,o),
(167,-110,qs),
(455,-110,ls),
(478,-110,o),
(512,-76,o),
(512,-53,qs),
(512,773,ls),
(512,796,o),
(478,830,o),
(455,830,qs),
(167,830,ls),
(147,830,o),
(118,802,o),
(118,762,o),
(147,733,o),
(167,733,qs),
(380,733,ls),
(388,733,o),
(388,725,qs),
(388,-5,ls),
(388,-13,o),
(380,-13,qs),
(167,-13,ls)
);
}
);
vertWidth = 1000;
width = 712;
}
);
note = uniFF3D;
unicode = 65341;
},
{
glyphname = cornerbracketleft.vert;
lastChange = "2023-08-28 01:24:10 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,567,o),
(237,533,o),
(260,533,qs),
(851,533,ls),
(860,533,o),
(860,525,qs),
(860,297,ls),
(860,275,o),
(891,243,o),
(935,243,o),
(967,275,o),
(967,297,qs),
(967,603,ls),
(967,626,o),
(933,660,o),
(910,660,qs),
(260,660,ls),
(237,660,o),
(203,626,o),
(203,603,qs),
(203,590,ls)
);
}
);
vertWidth = 680;
width = 1000;
}
);
note = glyph08472;
},
{
glyphname = cornerbracketright.vert;
lastChange = "2023-08-28 01:24:18 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,414,o),
(67,380,o),
(90,380,qs),
(740,380,ls),
(763,380,o),
(797,414,o),
(797,437,qs),
(797,450,ls),
(797,473,o),
(763,507,o),
(740,507,qs),
(149,507,ls),
(140,507,o),
(140,515,qs),
(140,743,ls),
(140,765,o),
(109,797,o),
(65,797,o),
(33,765,o),
(33,743,qs),
(33,437,ls)
);
}
);
vertWidth = 680;
width = 1000;
}
);
note = glyph08473;
},
{
glyphname = dblanglebracketleft.vert;
lastChange = "2023-08-28 01:24:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,210,o),
(30,154,qs),
(30,137,ls),
(30,118,o),
(63,99,o),
(79,108,qs),
(493,343,ls),
(500,347,o),
(507,343,qs),
(921,108,ls),
(937,99,o),
(970,118,o),
(970,137,qs),
(970,154,ls),
(970,210,o),
(921,238,qs),
(549,449,ls),
(500,477,o),
(451,449,qs),
(79,238,ls)
);
},
{
closed = 1;
nodes = (
(30,350,qs),
(30,334,ls),
(30,315,o),
(63,296,o),
(79,305,qs),
(493,539,ls),
(500,543,o),
(507,539,qs),
(921,305,ls),
(937,296,o),
(970,315,o),
(970,334,qs),
(970,350,ls),
(970,407,o),
(921,435,qs),
(549,646,ls),
(500,674,o),
(451,646,qs),
(79,435,ls),
(30,407,o)
);
}
);
vertWidth = 873;
width = 1000;
}
);
note = glyph08470;
},
{
glyphname = dblanglebracketright.vert;
lastChange = "2023-08-28 01:24:29 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,729,o),
(30,710,qs),
(30,693,ls),
(30,637,o),
(79,609,qs),
(451,398,ls),
(500,370,o),
(549,398,qs),
(921,609,ls),
(970,637,o),
(970,693,qs),
(970,710,ls),
(970,729,o),
(937,748,o),
(921,739,qs),
(507,504,ls),
(500,500,o),
(493,504,qs),
(79,739,ls),
(63,748,o)
);
},
{
closed = 1;
nodes = (
(970,532,o),
(937,551,o),
(921,542,qs),
(507,308,ls),
(500,304,o),
(493,308,qs),
(79,542,ls),
(63,551,o),
(30,532,o),
(30,513,qs),
(30,497,ls),
(30,440,o),
(79,412,qs),
(451,201,ls),
(500,173,o),
(549,201,qs),
(921,412,ls),
(970,440,o),
(970,497,qs),
(970,513,ls)
);
}
);
vertWidth = 873;
width = 1000;
}
);
note = glyph08471;
},
{
glyphname = parenleft.full;
lastChange = "2023-08-28 01:23:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,-110,o),
(514,-81,o),
(503,-70,qs),
(330,114,o),
(330,360,qs),
(330,599,o),
(504,789,qs),
(515,800,o),
(503,830,o),
(487,830,qs),
(480,830,ls),
(421,830,o),
(382,791,qs),
(296,703,o),
(200,480,o),
(200,360,qs),
(200,238,o),
(295,15,o),
(382,-72,qs),
(420,-110,o),
(480,-110,qs),
(487,-110,ls)
);
}
);
vertWidth = 1000;
width = 647;
}
);
note = uniFF08;
unicode = 65288;
},
{
glyphname = parenright.full;
lastChange = "2023-08-28 01:23:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,-110,o),
(265,-72,qs),
(352,15,o),
(447,238,o),
(447,360,qs),
(447,480,o),
(351,703,o),
(265,791,qs),
(226,830,o),
(167,830,qs),
(160,830,ls),
(144,830,o),
(132,800,o),
(143,789,qs),
(317,599,o),
(317,360,qs),
(317,114,o),
(144,-70,qs),
(133,-81,o),
(144,-110,o),
(160,-110,qs),
(167,-110,ls)
);
}
);
vertWidth = 1000;
width = 647;
}
);
note = uniFF09;
unicode = 65289;
},
{
glyphname = tortoiseshellbracketleft.vert;
lastChange = "2023-08-28 01:24:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,297,o),
(56,266,o),
(75,266,qs),
(97,266,o),
(133,294,o),
(139,315,qs),
(202,528,ls),
(204,536,o),
(213,536,qs),
(787,536,ls),
(796,536,o),
(798,528,qs),
(861,315,ls),
(867,294,o),
(903,266,o),
(925,266,qs),
(944,266,o),
(966,297,o),
(961,315,qs),
(877,605,ls),
(870,629,o),
(830,660,o),
(805,660,qs),
(195,660,ls),
(170,660,o),
(130,629,o),
(123,605,qs),
(39,315,ls)
);
}
);
vertWidth = 712;
width = 1000;
}
);
note = glyph08479;
},
{
glyphname = tortoiseshellbracketright.vert;
lastChange = "2023-08-28 01:24:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,714,o),
(97,742,o),
(75,742,qs),
(56,742,o),
(34,711,o),
(39,693,qs),
(123,403,ls),
(130,379,o),
(170,348,o),
(195,348,qs),
(805,348,ls),
(830,348,o),
(870,379,o),
(877,403,qs),
(961,693,ls),
(966,711,o),
(944,742,o),
(925,742,qs),
(903,742,o),
(867,714,o),
(861,693,qs),
(798,480,ls),
(796,472,o),
(787,472,qs),
(213,472,ls),
(204,472,o),
(202,480,qs),
(139,693,ls)
);
}
);
vertWidth = 712;
width = 1000;
}
);
note = glyph08480;
},
{
glyphname = whitecornerbracketleft.vert;
lastChange = "2023-08-28 01:24:44 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(893,578,qs),
(893,282,ls),
(893,274,o),
(885,274,qs),
(825,274,ls),
(817,274,o),
(817,282,qs),
(817,454,ls),
(817,477,o),
(783,510,o),
(760,510,qs),
(242,510,ls),
(233,510,o),
(233,519,qs),
(233,578,ls),
(233,587,o),
(242,587,qs),
(885,587,ls),
(893,587,o)
);
},
{
closed = 1;
nodes = (
(160,494,ls),
(160,471,o),
(194,437,o),
(217,437,qs),
(735,437,ls),
(743,437,o),
(743,428,qs),
(743,257,ls),
(743,234,o),
(777,200,o),
(800,200,qs),
(910,200,ls),
(933,200,o),
(967,234,o),
(967,257,qs),
(967,604,ls),
(967,627,o),
(933,660,o),
(910,660,qs),
(217,660,ls),
(194,660,o),
(160,627,o),
(160,604,qs),
(160,587,l)
);
}
);
vertWidth = 723;
width = 1000;
}
);
note = glyph08474;
},
{
glyphname = whitecornerbracketright.vert;
lastChange = "2023-08-28 01:24:50 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,715,qs),
(183,543,ls),
(183,520,o),
(217,487,o),
(240,487,qs),
(758,487,ls),
(767,487,o),
(767,478,qs),
(767,418,ls),
(767,410,o),
(758,410,qs),
(115,410,ls),
(107,410,o),
(107,418,qs),
(107,715,ls),
(107,723,o),
(115,723,qs),
(175,723,ls),
(183,723,o)
);
},
{
closed = 1;
nodes = (
(33,370,o),
(67,337,o),
(90,337,qs),
(783,337,ls),
(806,337,o),
(840,370,o),
(840,393,qs),
(840,410,l),
(840,503,ls),
(840,526,o),
(806,560,o),
(783,560,qs),
(265,560,ls),
(257,560,o),
(257,569,qs),
(257,740,ls),
(257,763,o),
(223,797,o),
(200,797,qs),
(90,797,ls),
(67,797,o),
(33,763,o),
(33,740,qs),
(33,393,ls)
);
}
);
vertWidth = 723;
width = 1000;
}
);
note = glyph08475;
},
{
glyphname = whitelenticularbracketleft.vert;
lastChange = "2023-08-28 01:24:56 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(897,578,qs),
(897,419,ls),
(897,416,o),
(892,413,o),
(890,415,q),
(709,524,o),
(291,524,o),
(110,415,q),
(108,413,o),
(103,416,o),
(103,419,qs),
(103,578,ls),
(103,587,o),
(112,587,qs),
(888,587,ls),
(897,587,o)
);
},
{
closed = 1;
nodes = (
(30,311,o),
(60,296,o),
(73,307,qs),
(162,376,o),
(383,450,o),
(617,450,o),
(838,376,o),
(927,307,qs),
(940,296,o),
(970,311,o),
(970,327,qs),
(970,604,ls),
(970,627,o),
(936,660,o),
(913,660,qs),
(87,660,ls),
(64,660,o),
(30,627,o),
(30,604,qs),
(30,327,ls)
);
}
);
vertWidth = 683;
width = 1000;
}
);
note = glyph08481;
},
{
glyphname = whitelenticularbracketright.vert;
lastChange = "2023-08-28 01:25:02 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(709,513,o),
(890,622,q),
(892,624,o),
(897,621,o),
(897,618,qs),
(897,458,ls),
(897,450,o),
(888,450,qs),
(112,450,ls),
(103,450,o),
(103,458,qs),
(103,618,ls),
(103,621,o),
(108,624,o),
(110,622,q),
(291,513,o)
);
},
{
closed = 1;
nodes = (
(30,410,o),
(64,377,o),
(87,377,qs),
(913,377,ls),
(936,377,o),
(970,410,o),
(970,433,qs),
(970,710,ls),
(970,726,o),
(940,741,o),
(927,730,qs),
(838,661,o),
(617,587,o),
(383,587,o),
(162,661,o),
(73,730,qs),
(60,741,o),
(30,726,o),
(30,710,qs),
(30,433,ls)
);
}
);
vertWidth = 683;
width = 1000;
}
);
note = glyph08482;
},
{
glyphname = braceleft.full.vert;
lastChange = "2023-08-28 01:25:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,380,o),
(663,380,qs),
(773,380,ls),
(839,380,o),
(873,346,o),
(873,287,qs),
(873,212,ls),
(873,192,o),
(902,164,o),
(942,164,o),
(970,192,o),
(970,212,qs),
(970,350,ls),
(970,432,o),
(896,504,o),
(810,504,qs),
(668,504,ls),
(606,504,o),
(552,545,o),
(552,590,qs),
(552,609,ls),
(552,631,o),
(522,660,o),
(478,660,o),
(448,631,o),
(448,609,qs),
(448,590,ls),
(448,545,o),
(394,504,o),
(332,504,qs),
(190,504,ls),
(104,504,o),
(30,432,o),
(30,350,qs),
(30,212,ls),
(30,192,o),
(58,164,o),
(98,164,o),
(127,192,o),
(127,212,qs),
(127,287,ls),
(127,346,o),
(161,380,o),
(227,380,qs),
(337,380,ls),
(402,380,o),
(475,427,o),
(498,482,q),
(498,484,o),
(502,484,o),
(502,482,q),
(525,427,o)
);
}
);
vertWidth = 808;
width = 1000;
}
);
note = glyph08522;
},
{
glyphname = braceright.full.vert;
lastChange = "2023-08-28 01:25:13 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,532,o),
(337,532,qs),
(227,532,ls),
(161,532,o),
(127,566,o),
(127,625,qs),
(127,700,ls),
(127,720,o),
(98,748,o),
(58,748,o),
(30,720,o),
(30,700,qs),
(30,562,ls),
(30,480,o),
(104,408,o),
(190,408,qs),
(332,408,ls),
(394,408,o),
(448,367,o),
(448,322,qs),
(448,303,ls),
(448,281,o),
(478,252,o),
(522,252,o),
(552,281,o),
(552,303,qs),
(552,322,ls),
(552,367,o),
(606,408,o),
(668,408,qs),
(810,408,ls),
(896,408,o),
(970,480,o),
(970,562,qs),
(970,700,ls),
(970,720,o),
(942,748,o),
(902,748,o),
(873,720,o),
(873,700,qs),
(873,625,ls),
(873,566,o),
(839,532,o),
(773,532,qs),
(663,532,ls),
(598,532,o),
(525,485,o),
(502,430,q),
(502,428,o),
(498,428,o),
(498,430,q),
(475,485,o)
);
}
);
vertWidth = 808;
width = 1000;
}
);
note = glyph08523;
},
{
glyphname = bracketleft.full.vert;
lastChange = "2023-08-28 01:25:20 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,295,o),
(58,266,o),
(98,266,o),
(127,295,o),
(127,315,qs),
(127,528,ls),
(127,536,o),
(135,536,qs),
(865,536,ls),
(873,536,o),
(873,528,qs),
(873,315,ls),
(873,295,o),
(902,266,o),
(942,266,o),
(970,295,o),
(970,315,qs),
(970,603,ls),
(970,626,o),
(936,660,o),
(913,660,qs),
(87,660,ls),
(64,660,o),
(30,626,o),
(30,603,qs),
(30,315,ls)
);
}
);
vertWidth = 712;
width = 1000;
}
);
note = glyph08520;
},
{
glyphname = bracketright.full.vert;
lastChange = "2023-08-28 01:25:26 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,713,o),
(98,742,o),
(58,742,o),
(30,713,o),
(30,693,qs),
(30,405,ls),
(30,382,o),
(64,348,o),
(87,348,qs),
(913,348,ls),
(936,348,o),
(970,382,o),
(970,405,qs),
(970,693,ls),
(970,713,o),
(942,742,o),
(902,742,o),
(873,713,o),
(873,693,qs),
(873,480,ls),
(873,472,o),
(865,472,qs),
(135,472,ls),
(127,472,o),
(127,480,qs),
(127,693,ls)
);
}
);
vertWidth = 712;
width = 1000;
}
);
note = glyph08521;
},
{
glyphname = parenleft.full.vert;
lastChange = "2023-08-28 01:25:32 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,357,o),
(59,346,o),
(70,357,qs),
(254,530,o),
(500,530,qs),
(739,530,o),
(929,356,qs),
(940,345,o),
(970,357,o),
(970,373,qs),
(970,380,ls),
(970,439,o),
(931,478,qs),
(843,564,o),
(620,660,o),
(500,660,qs),
(378,660,o),
(155,565,o),
(68,478,qs),
(30,440,o),
(30,380,qs),
(30,373,ls)
);
}
);
vertWidth = 647;
width = 1000;
}
);
note = glyph08516;
},
{
glyphname = parenright.full.vert;
lastChange = "2023-08-28 01:25:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,633,o),
(68,595,qs),
(155,508,o),
(378,413,o),
(500,413,qs),
(620,413,o),
(843,509,o),
(931,595,qs),
(970,634,o),
(970,693,qs),
(970,700,ls),
(970,716,o),
(940,728,o),
(929,717,qs),
(739,543,o),
(500,543,qs),
(254,543,o),
(70,716,qs),
(59,727,o),
(30,716,o),
(30,700,qs),
(30,693,ls)
);
}
);
vertWidth = 647;
width = 1000;
}
);
note = glyph08517;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
isBold = 1;
name = Bold;
properties = (
{
key = postscriptFullName;
value = "Yaku Han RP s Bold";
},
{
key = postscriptFontName;
value = "YakuHanRPs-Bold";
}
);
weightClass = 700;
}
);
metrics = (
{
type = ascender;
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2016 The Rounded M+ Project Authors.";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "http://jikasei.me/";
}
);
settings = {
disablesAutomaticAlignment = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 59;
}
