{
.appVersion = "3151";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = "M+  ";
},
{
name = panose;
value = (
2,
11,
8,
2,
2,
2,
3,
2,
2,
7
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
11,
24,
29,
30,
31,
32,
33,
35,
36,
37,
38,
39,
40,
42,
43,
44,
45,
46,
47,
48,
49,
50,
54,
57,
59,
61,
62,
65,
68,
89
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1253",
"1254",
"1255",
"1257",
"1258",
"932",
"950",
"bit 29",
"bit 30",
"869",
"866",
"865",
"863",
"862",
"861",
"860",
"857",
"855",
"852",
"775",
"737",
"850",
"437"
);
},
{
name = fsType;
value = (
);
}
);
date = "2015-05-28 17:05:23 +0000";
familyName = "Yaku Han RP";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature vert;
feature vrt2;
";
tag = aalt;
},
{
automatic = 1;
code = "sub comma-han by comma-han.vert;
sub period-han by period-han.vert;
sub colon.full by colon.full.vert;
sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vert;
},
{
automatic = 1;
code = "sub comma-han by comma-han.vert;
sub period-han by period-han.vert;
sub colon.full by colon.full.vert;
sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vrt2;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 860;
},
{
name = typoDescender;
value = -140;
},
{
name = typoLineGap;
value = 90;
},
{
name = winAscent;
value = 1075;
},
{
name = winDescent;
value = 320;
},
{
name = hheaAscender;
value = 1075;
},
{
name = hheaDescender;
value = -320;
},
{
name = strikeoutPosition;
value = 258;
},
{
name = strikeoutSize;
value = 49;
},
{
name = "prep Table Assembly";
value = "PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SCANTYPE[ ]	/* ScanType */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01270 6 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012EIF[ ]	/* EndIf */\012SCVTCI[ ]	/* SetCVTCutIn */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP0[ ]	/* SetZonePointer0 */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01274 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012MIAP[1]	/* MoveIndirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10100]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012ROUND[01]	/* Round */\012RTG[ ]	/* RoundToGrid */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ROFF[ ]	/* RoundOff */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012IF[ ]	/* If */\012MIRP[11101]	/* MoveIndirectRelPt */\012ELSE[ ]	/* Else */\012MIRP[01101]	/* MoveIndirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01270 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012GFV[ ]	/* GetFVector */\012NOT[ ]	/* LogicalNot */\012AND[ ]	/* LogicalAnd */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01234 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012MDRP[00100]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012ELSE[ ]	/* Else */\012SRP0[ ]	/* SetRefPoint0 */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012NEG[ ]	/* Negate */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012MDRP[10110]	/* MoveDirectRelPt */\012RTG[ ]	/* RoundToGrid */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[0]	/* MeasureDistance */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SPVTL[1]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012MDRP[00000]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 64 1 64 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0120 32 0 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0121 32 1 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01225 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    \"-220\",\012    0,\012    520,\012    730,\012    750,\012    33,\012    633\012)";
}
);
id = m01;
metricValues = (
{
pos = 860;
},
{
},
{
pos = -140;
},
{
}
);
name = ExtraBold;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 364;
}
);
note = ".notdef";
},
{
glyphname = space;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 291;
}
);
note = space;
unicode = 32;
},
{
glyphname = nbspace;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 291;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = "comma-han";
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,-59,o),
(293,-45,qs),
(317,-27,ls),
(336,-13,o),
(342,31,o),
(328,49,qs),
(283,104,o),
(212,189,qs),
(197,207,o),
(149,211,o),
(131,196,qs),
(107,177,ls),
(89,162,o),
(86,115,o),
(101,98,qs),
(147,45,o),
(211,-33,qs),
(226,-52,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3001;
unicode = 12289;
},
{
glyphname = "comma-han.vert";
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(847,506,o),
(866,520,qs),
(890,538,ls),
(909,552,o),
(915,596,o),
(901,614,qs),
(856,669,o),
(785,754,qs),
(770,772,o),
(722,776,o),
(704,761,qs),
(680,742,ls),
(662,727,o),
(659,680,o),
(674,663,qs),
(720,610,o),
(784,532,qs),
(799,513,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08466;
},
{
glyphname = "period-han";
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,51,o),
(243,14,o),
(191,14,o),
(154,51,o),
(154,103,o),
(191,141,o),
(243,141,o),
(281,103,o)
);
},
{
closed = 1;
nodes = (
(384,146,o),
(286,244,o),
(148,244,o),
(51,146,o),
(51,8,o),
(148,-89,o),
(286,-89,o),
(384,8,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3002;
unicode = 12290;
},
{
glyphname = "period-han.vert";
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(846,616,o),
(808,579,o),
(756,579,o),
(719,616,o),
(719,668,o),
(756,706,o),
(808,706,o),
(846,668,o)
);
},
{
closed = 1;
nodes = (
(949,711,o),
(851,809,o),
(713,809,o),
(616,711,o),
(616,573,o),
(713,476,o),
(851,476,o),
(949,573,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08467;
},
{
glyphname = "dot-kata";
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,262,o),
(598,295,o),
(598,318,qs),
(598,402,ls),
(598,425,o),
(565,458,o),
(542,458,qs),
(458,458,ls),
(435,458,o),
(402,425,o),
(402,402,qs),
(402,318,ls),
(402,295,o),
(435,262,o),
(458,262,qs),
(542,262,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni30FB;
unicode = 12539;
},
{
glyphname = hyphenationpoint;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,195,o),
(311,229,o),
(311,252,qs),
(311,328,ls),
(311,351,o),
(277,385,o),
(254,385,qs),
(178,385,ls),
(155,385,o),
(121,351,o),
(121,328,qs),
(121,252,ls),
(121,229,o),
(155,195,o),
(178,195,qs),
(254,195,ls)
);
}
);
vertWidth = 1000;
width = 432;
}
);
note = uni2027;
unicode = 8231;
},
{
glyphname = colon.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(561,57,o),
(595,90,o),
(595,113,qs),
(595,190,ls),
(595,213,o),
(561,247,o),
(538,247,qs),
(462,247,ls),
(439,247,o),
(405,213,o),
(405,190,qs),
(405,113,ls),
(405,90,o),
(439,57,o),
(462,57,qs),
(538,57,ls)
);
},
{
closed = 1;
nodes = (
(561,473,o),
(595,507,o),
(595,530,qs),
(595,607,ls),
(595,630,o),
(561,663,o),
(538,663,qs),
(462,663,ls),
(439,663,o),
(405,630,o),
(405,607,qs),
(405,530,ls),
(405,507,o),
(439,473,o),
(462,473,qs),
(538,473,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1A;
unicode = 65306;
},
{
glyphname = exclam.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,230,o),
(578,263,o),
(580,287,qs),
(599,673,ls),
(600,696,o),
(568,730,o),
(545,730,qs),
(455,730,ls),
(432,730,o),
(400,696,o),
(401,673,qs),
(421,287,ls),
(423,263,o),
(456,230,o),
(480,230,qs),
(520,230,ls)
);
},
{
closed = 1;
nodes = (
(447,150,o),
(413,116,o),
(413,93,qs),
(413,57,ls),
(413,34,o),
(447,0,o),
(470,0,qs),
(530,0,ls),
(553,0,o),
(587,34,o),
(587,57,qs),
(587,93,ls),
(587,116,o),
(553,150,o),
(530,150,qs),
(470,150,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF01;
unicode = 65281;
},
{
glyphname = question.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,577,o),
(298,582,qs),
(397,606,o),
(477,606,qs),
(605,606,o),
(605,540,qs),
(605,521,o),
(578,484,o),
(549,461,o),
(520,441,qs),
(491,420,o),
(464,401,o),
(418,359,o),
(390,314,o),
(383,288,qs),
(376,266,o),
(408,232,o),
(432,232,qs),
(475,232,ls),
(517,232,o),
(547,285,qs),
(569,325,o),
(648,374,qs),
(682,396,o),
(716,421,o),
(763,468,o),
(783,526,o),
(783,563,qs),
(783,642,o),
(635,740,o),
(502,740,qs),
(387,740,o),
(268,715,qs),
(245,710,o),
(221,669,o),
(226,646,qs),
(231,623,ls),
(236,601,o)
);
},
{
closed = 1;
nodes = (
(400,150,o),
(367,116,o),
(367,93,qs),
(367,57,ls),
(367,34,o),
(400,0,o),
(423,0,qs),
(483,0,ls),
(506,0,o),
(540,34,o),
(540,57,qs),
(540,93,ls),
(540,116,o),
(506,150,o),
(483,150,qs),
(423,150,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1F;
unicode = 65311;
},
{
glyphname = semicolon.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,-53,o),
(498,-24,o),
(507,0,qs),
(583,194,ls),
(591,213,o),
(567,247,o),
(547,247,qs),
(467,247,ls),
(442,247,o),
(403,215,o),
(398,191,qs),
(358,2,ls),
(354,-20,o),
(381,-53,o),
(403,-53,qs),
(430,-53,ls)
);
},
{
closed = 1;
nodes = (
(444,663,o),
(410,630,o),
(410,607,qs),
(410,530,ls),
(410,507,o),
(444,473,o),
(467,473,qs),
(543,473,ls),
(566,473,o),
(600,507,o),
(600,530,qs),
(600,607,ls),
(600,630,o),
(566,663,o),
(543,663,qs),
(467,663,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1B;
unicode = 65307;
},
{
glyphname = colon.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(561,57,o),
(595,90,o),
(595,113,qs),
(595,190,ls),
(595,213,o),
(561,247,o),
(538,247,qs),
(462,247,ls),
(439,247,o),
(405,213,o),
(405,190,qs),
(405,113,ls),
(405,90,o),
(439,57,o),
(462,57,qs),
(538,57,ls)
);
},
{
closed = 1;
nodes = (
(561,473,o),
(595,507,o),
(595,530,qs),
(595,607,ls),
(595,630,o),
(561,663,o),
(538,663,qs),
(462,663,ls),
(439,663,o),
(405,630,o),
(405,607,qs),
(405,530,ls),
(405,507,o),
(439,473,o),
(462,473,qs),
(538,473,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08518;
},
{
glyphname = angleLeft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,-185,o),
(332,-185,qs),
(382,-185,ls),
(400,-185,o),
(420,-152,o),
(411,-135,qs),
(179,285,l),
(174,292,o),
(179,300,qs),
(411,720,ls),
(420,737,o),
(400,770,o),
(382,770,qs),
(332,770,ls),
(305,770,o),
(260,743,o),
(248,720,qs),
(39,342,ls),
(12,292,o),
(39,243,qs),
(248,-135,ls),
(260,-158,o)
);
}
);
vertWidth = 1000;
width = 446;
}
);
note = angleleft;
unicode = 9001;
},
{
glyphname = angleRight;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,-185,o),
(64,-185,qs),
(114,-185,ls),
(140,-185,o),
(185,-158,o),
(198,-135,qs),
(407,243,ls),
(434,292,o),
(407,342,qs),
(198,720,ls),
(185,743,o),
(140,770,o),
(114,770,qs),
(64,770,ls),
(45,770,o),
(26,737,o),
(35,720,qs),
(267,300,ls),
(272,292,o),
(267,285,q),
(35,-135,ls),
(26,-152,o)
);
}
);
vertWidth = 1000;
width = 446;
}
);
note = angleright;
unicode = 9002;
},
{
glyphname = anglebracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(802,-118,qs),
(852,-118,ls),
(871,-118,o),
(890,-85,o),
(881,-68,qs),
(649,353,ls),
(645,360,o),
(649,367,qs),
(881,788,ls),
(890,805,o),
(871,838,o),
(852,838,qs),
(802,838,ls),
(745,838,o),
(718,788,qs),
(509,410,ls),
(482,360,o),
(509,310,qs),
(718,-68,ls),
(745,-118,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3008;
unicode = 12296;
},
{
glyphname = anglebracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,838,o),
(110,805,o),
(119,788,qs),
(351,367,ls),
(355,360,o),
(351,353,qs),
(119,-68,ls),
(110,-85,o),
(129,-118,o),
(148,-118,qs),
(198,-118,ls),
(255,-118,o),
(282,-68,qs),
(491,310,ls),
(518,360,o),
(491,410,qs),
(282,788,ls),
(255,838,o),
(198,838,qs),
(148,838,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3009;
unicode = 12297;
},
{
glyphname = blacklenticularbracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(868,-118,o),
(880,-89,o),
(870,-77,qs),
(792,13,o),
(708,240,o),
(708,480,o),
(792,707,o),
(870,797,qs),
(880,809,o),
(868,838,o),
(852,838,qs),
(637,838,ls),
(614,838,o),
(580,804,o),
(580,781,qs),
(580,-61,ls),
(580,-84,o),
(614,-118,o),
(637,-118,qs),
(852,-118,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3010;
unicode = 12304;
},
{
glyphname = blacklenticularbracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-118,o),
(420,-84,o),
(420,-61,qs),
(420,781,ls),
(420,804,o),
(386,838,o),
(363,838,qs),
(148,838,ls),
(132,838,o),
(120,809,o),
(130,797,qs),
(208,707,o),
(292,480,o),
(292,240,o),
(208,13,o),
(130,-77,qs),
(120,-89,o),
(132,-118,o),
(148,-118,qs),
(363,-118,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3011;
unicode = 12305;
},
{
glyphname = braceleft.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(678,461,o),
(678,529,qs),
(678,629,ls),
(678,693,o),
(709,724,o),
(770,724,qs),
(830,724,ls),
(853,724,o),
(887,758,o),
(887,804,o),
(853,838,o),
(830,838,qs),
(693,838,ls),
(608,838,o),
(532,761,o),
(532,672,qs),
(532,534,ls),
(532,472,o),
(491,421,o),
(443,421,qs),
(430,421,ls),
(407,421,o),
(373,387,o),
(373,364,qs),
(373,356,ls),
(373,333,o),
(407,299,o),
(430,299,qs),
(443,299,ls),
(491,299,o),
(532,248,o),
(532,186,qs),
(532,48,ls),
(532,-41,o),
(608,-118,o),
(693,-118,qs),
(830,-118,ls),
(853,-118,o),
(887,-84,o),
(887,-38,o),
(853,-4,o),
(830,-4,qs),
(770,-4,ls),
(709,-4,o),
(678,27,o),
(678,91,qs),
(678,191,ls),
(678,259,o),
(628,335,o),
(569,358,q),
(567,358,o),
(567,362,o),
(569,362,q),
(628,385,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF5B;
unicode = 65371;
},
{
glyphname = braceright.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,259,o),
(322,191,qs),
(322,91,ls),
(322,27,o),
(291,-4,o),
(230,-4,qs),
(170,-4,ls),
(147,-4,o),
(113,-38,o),
(113,-84,o),
(147,-118,o),
(170,-118,qs),
(307,-118,ls),
(392,-118,o),
(468,-41,o),
(468,48,qs),
(468,186,ls),
(468,248,o),
(509,299,o),
(557,299,qs),
(570,299,ls),
(593,299,o),
(627,333,o),
(627,356,qs),
(627,364,ls),
(627,387,o),
(593,421,o),
(570,421,qs),
(557,421,ls),
(509,421,o),
(468,472,o),
(468,534,qs),
(468,672,ls),
(468,761,o),
(392,838,o),
(307,838,qs),
(170,838,ls),
(147,838,o),
(113,804,o),
(113,758,o),
(147,724,o),
(170,724,qs),
(230,724,ls),
(291,724,o),
(322,693,o),
(322,629,qs),
(322,529,ls),
(322,461,o),
(372,385,o),
(431,362,q),
(433,362,o),
(433,358,o),
(431,358,q),
(372,335,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF5D;
unicode = 65373;
},
{
glyphname = cornerbracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(625,62,o),
(658,95,o),
(658,118,qs),
(658,691,ls),
(658,700,o),
(667,700,qs),
(882,700,ls),
(905,700,o),
(938,734,o),
(938,757,qs),
(938,772,ls),
(938,795,o),
(905,828,o),
(882,828,qs),
(562,828,ls),
(539,828,o),
(505,795,o),
(505,772,qs),
(505,118,ls),
(505,95,o),
(539,62,o),
(562,62,qs),
(602,62,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300C;
unicode = 12300;
},
{
glyphname = cornerbracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,-108,o),
(495,-75,o),
(495,-52,qs),
(495,602,ls),
(495,625,o),
(461,658,o),
(438,658,qs),
(398,658,ls),
(375,658,o),
(342,625,o),
(342,602,qs),
(342,29,ls),
(342,20,o),
(333,20,qs),
(118,20,ls),
(95,20,o),
(62,-14,o),
(62,-37,qs),
(62,-52,ls),
(62,-75,o),
(95,-108,o),
(118,-108,qs),
(438,-108,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300D;
unicode = 12301;
},
{
glyphname = dblanglebracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(871,838,o),
(852,838,qs),
(810,838,ls),
(753,838,o),
(726,788,qs),
(517,410,ls),
(490,360,o),
(517,310,qs),
(726,-68,ls),
(753,-118,o),
(810,-118,qs),
(852,-118,ls),
(871,-118,o),
(890,-85,o),
(881,-68,qs),
(649,353,ls),
(645,360,o),
(649,367,qs),
(881,788,ls),
(890,805,o)
);
},
{
closed = 1;
nodes = (
(587,-118,qs),
(628,-118,ls),
(647,-118,o),
(667,-84,o),
(658,-68,qs),
(426,353,ls),
(422,360,o),
(426,367,qs),
(658,788,ls),
(667,804,o),
(647,838,o),
(628,838,qs),
(587,838,ls),
(530,838,o),
(503,788,qs),
(294,410,ls),
(267,360,o),
(294,310,qs),
(503,-68,ls),
(530,-118,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300A;
unicode = 12298;
},
{
glyphname = dblanglebracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,-118,o),
(148,-118,qs),
(190,-118,ls),
(247,-118,o),
(274,-68,qs),
(483,310,ls),
(510,360,o),
(483,410,qs),
(274,788,ls),
(247,838,o),
(190,838,qs),
(148,838,ls),
(129,838,o),
(110,805,o),
(119,788,qs),
(351,367,ls),
(355,360,o),
(351,353,qs),
(119,-68,ls),
(110,-85,o)
);
},
{
closed = 1;
nodes = (
(353,838,o),
(333,804,o),
(342,788,qs),
(574,367,ls),
(578,360,o),
(574,353,qs),
(342,-68,ls),
(333,-84,o),
(353,-118,o),
(372,-118,qs),
(413,-118,ls),
(470,-118,o),
(497,-68,qs),
(706,310,ls),
(733,360,o),
(706,410,qs),
(497,788,ls),
(470,838,o),
(413,838,qs),
(372,838,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300B;
unicode = 12299;
},
{
glyphname = tortoiseshellbracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(850,-113,o),
(883,-88,o),
(883,-66,qs),
(883,-62,ls),
(883,-37,o),
(853,3,o),
(829,10,qs),
(622,66,ls),
(613,68,o),
(613,77,qs),
(613,643,ls),
(613,652,o),
(622,654,qs),
(829,710,ls),
(853,717,o),
(883,757,o),
(883,782,qs),
(883,786,ls),
(883,808,o),
(850,833,o),
(829,828,qs),
(521,746,ls),
(497,739,o),
(467,699,o),
(467,674,qs),
(467,46,ls),
(467,21,o),
(497,-19,o),
(521,-26,qs),
(829,-108,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3014;
unicode = 12308;
},
{
glyphname = tortoiseshellbracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,-19,o),
(533,21,o),
(533,46,qs),
(533,674,ls),
(533,699,o),
(503,739,o),
(479,746,qs),
(171,828,ls),
(150,833,o),
(117,808,o),
(117,786,qs),
(117,782,ls),
(117,757,o),
(147,717,o),
(171,710,qs),
(378,654,ls),
(387,652,o),
(387,643,qs),
(387,77,ls),
(387,68,o),
(378,66,qs),
(171,10,ls),
(147,3,o),
(117,-37,o),
(117,-62,qs),
(117,-66,ls),
(117,-88,o),
(150,-113,o),
(171,-108,qs),
(479,-26,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3015;
unicode = 12309;
},
{
glyphname = whitecornerbracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(554,742,qs),
(843,742,ls),
(852,742,o),
(852,733,qs),
(852,672,ls),
(852,663,o),
(843,663,qs),
(680,663,ls),
(657,663,o),
(623,630,o),
(623,607,qs),
(623,110,ls),
(623,102,o),
(615,102,qs),
(554,102,ls),
(545,102,o),
(545,110,qs),
(545,733,ls),
(545,742,o)
);
},
{
closed = 1;
nodes = (
(653,15,ls),
(676,15,o),
(710,49,o),
(710,72,qs),
(710,568,ls),
(710,577,o),
(719,577,qs),
(882,577,ls),
(905,577,o),
(938,610,o),
(938,633,qs),
(938,772,ls),
(938,795,o),
(905,828,o),
(882,828,qs),
(515,828,ls),
(492,828,o),
(458,795,o),
(458,772,qs),
(458,72,ls),
(458,49,o),
(492,15,o),
(515,15,qs),
(545,15,l)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300E;
unicode = 12302;
},
{
glyphname = whitecornerbracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,57,qs),
(320,57,ls),
(343,57,o),
(377,90,o),
(377,113,qs),
(377,610,ls),
(377,618,o),
(385,618,qs),
(446,618,ls),
(455,618,o),
(455,610,qs),
(455,-13,ls),
(455,-22,o),
(446,-22,qs),
(157,-22,ls),
(148,-22,o),
(148,-13,qs),
(148,48,ls),
(148,57,o)
);
},
{
closed = 1;
nodes = (
(508,-108,o),
(542,-75,o),
(542,-52,qs),
(542,648,ls),
(542,671,o),
(508,705,o),
(485,705,qs),
(455,705,l),
(347,705,ls),
(324,705,o),
(290,671,o),
(290,648,qs),
(290,152,ls),
(290,143,o),
(281,143,qs),
(118,143,ls),
(95,143,o),
(62,110,o),
(62,87,qs),
(62,-52,ls),
(62,-75,o),
(95,-108,o),
(118,-108,qs),
(485,-108,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300F;
unicode = 12303;
},
{
glyphname = whitelenticularbracketleft;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,751,qs),
(736,751,ls),
(744,751,o),
(740,743,qs),
(642,564,o),
(642,156,o),
(740,-23,qs),
(744,-31,o),
(736,-31,qs),
(589,-31,ls),
(580,-31,o),
(580,-22,qs),
(580,742,ls),
(580,751,o)
);
},
{
closed = 1;
nodes = (
(868,-118,o),
(882,-86,o),
(871,-73,qs),
(728,116,o),
(728,604,o),
(871,793,qs),
(882,806,o),
(868,838,o),
(852,838,qs),
(550,838,ls),
(527,838,o),
(493,804,o),
(493,781,qs),
(493,-61,ls),
(493,-84,o),
(527,-118,o),
(550,-118,qs),
(852,-118,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3016;
unicode = 12310;
},
{
glyphname = whitelenticularbracketright;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,566,o),
(261,743,qs),
(257,751,o),
(264,751,qs),
(412,751,ls),
(420,751,o),
(420,742,qs),
(420,-22,ls),
(420,-31,o),
(412,-31,qs),
(264,-31,ls),
(257,-31,o),
(261,-23,qs),
(358,154,o)
);
},
{
closed = 1;
nodes = (
(473,-118,o),
(507,-84,o),
(507,-61,qs),
(507,781,ls),
(507,804,o),
(473,838,o),
(450,838,qs),
(148,838,ls),
(132,838,o),
(118,806,o),
(129,793,qs),
(272,604,o),
(272,116,o),
(129,-73,qs),
(118,-86,o),
(132,-118,o),
(148,-118,qs),
(450,-118,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3017;
unicode = 12311;
},
{
glyphname = anglebracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,58,qs),
(22,8,ls),
(22,-11,o),
(55,-30,o),
(72,-21,qs),
(493,211,ls),
(500,215,o),
(507,211,qs),
(928,-21,ls),
(945,-30,o),
(978,-11,o),
(978,8,qs),
(978,58,ls),
(978,115,o),
(928,142,qs),
(550,351,ls),
(500,378,o),
(450,351,qs),
(72,142,ls),
(22,115,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08468;
},
{
glyphname = anglebracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(978,731,o),
(945,750,o),
(928,741,qs),
(507,509,ls),
(500,505,o),
(493,509,qs),
(72,741,ls),
(55,750,o),
(22,731,o),
(22,712,qs),
(22,662,ls),
(22,605,o),
(72,578,qs),
(450,369,ls),
(500,342,o),
(550,369,qs),
(928,578,ls),
(978,605,o),
(978,662,qs),
(978,712,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08469;
},
{
glyphname = blacklenticularbracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,-8,o),
(51,-20,o),
(63,-10,qs),
(153,68,o),
(380,152,o),
(620,152,o),
(847,68,o),
(937,-10,qs),
(949,-20,o),
(978,-8,o),
(978,8,qs),
(978,223,ls),
(978,246,o),
(944,280,o),
(921,280,qs),
(79,280,ls),
(56,280,o),
(22,246,o),
(22,223,qs),
(22,8,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08476;
},
{
glyphname = blacklenticularbracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,474,o),
(56,440,o),
(79,440,qs),
(921,440,ls),
(944,440,o),
(978,474,o),
(978,497,qs),
(978,712,ls),
(978,728,o),
(949,740,o),
(937,730,qs),
(847,652,o),
(620,568,o),
(380,568,o),
(153,652,o),
(63,730,qs),
(51,740,o),
(22,728,o),
(22,712,qs),
(22,497,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08477;
},
{
glyphname = bracketleft.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(850,-118,o),
(883,-84,o),
(883,-38,o),
(850,-4,o),
(827,-4,qs),
(622,-4,ls),
(613,-4,o),
(613,4,qs),
(613,716,ls),
(613,724,o),
(622,724,qs),
(827,724,ls),
(850,724,o),
(883,758,o),
(883,804,o),
(850,838,o),
(827,838,qs),
(523,838,ls),
(500,838,o),
(467,804,o),
(467,781,qs),
(467,-61,ls),
(467,-84,o),
(500,-118,o),
(523,-118,qs),
(827,-118,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF3B;
unicode = 65339;
},
{
glyphname = bracketright.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,-4,o),
(117,-38,o),
(117,-84,o),
(150,-118,o),
(173,-118,qs),
(477,-118,ls),
(500,-118,o),
(533,-84,o),
(533,-61,qs),
(533,781,ls),
(533,804,o),
(500,838,o),
(477,838,qs),
(173,838,ls),
(150,838,o),
(117,804,o),
(117,758,o),
(150,724,o),
(173,724,qs),
(378,724,ls),
(387,724,o),
(387,716,qs),
(387,4,ls),
(387,-4,o),
(378,-4,qs),
(173,-4,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF3D;
unicode = 65341;
},
{
glyphname = cornerbracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,235,o),
(235,202,o),
(258,202,qs),
(831,202,ls),
(840,202,o),
(840,193,qs),
(840,-22,ls),
(840,-45,o),
(874,-78,o),
(897,-78,qs),
(912,-78,ls),
(935,-78,o),
(968,-45,o),
(968,-22,qs),
(968,298,ls),
(968,321,o),
(935,355,o),
(912,355,qs),
(258,355,ls),
(235,355,o),
(202,321,o),
(202,298,qs),
(202,258,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08472;
},
{
glyphname = cornerbracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,399,o),
(65,365,o),
(88,365,qs),
(742,365,ls),
(765,365,o),
(798,399,o),
(798,422,qs),
(798,462,ls),
(798,485,o),
(765,518,o),
(742,518,qs),
(169,518,ls),
(160,518,o),
(160,527,qs),
(160,742,ls),
(160,765,o),
(126,798,o),
(103,798,qs),
(88,798,ls),
(65,798,o),
(32,765,o),
(32,742,qs),
(32,422,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08473;
},
{
glyphname = dblanglebracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(978,-11,o),
(978,8,qs),
(978,50,ls),
(978,107,o),
(928,134,qs),
(550,343,ls),
(500,370,o),
(450,343,qs),
(72,134,ls),
(22,107,o),
(22,50,qs),
(22,8,ls),
(22,-11,o),
(55,-30,o),
(72,-21,qs),
(493,211,ls),
(500,215,o),
(507,211,qs),
(928,-21,ls),
(945,-30,o)
);
},
{
closed = 1;
nodes = (
(22,273,qs),
(22,232,ls),
(22,213,o),
(56,193,o),
(72,202,qs),
(493,434,ls),
(500,438,o),
(507,434,qs),
(928,202,ls),
(944,193,o),
(978,213,o),
(978,232,qs),
(978,273,ls),
(978,330,o),
(928,357,qs),
(550,566,ls),
(500,593,o),
(450,566,qs),
(72,357,ls),
(22,330,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08470;
},
{
glyphname = dblanglebracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,731,o),
(22,712,qs),
(22,670,ls),
(22,613,o),
(72,586,qs),
(450,377,ls),
(500,350,o),
(550,377,qs),
(928,586,ls),
(978,613,o),
(978,670,qs),
(978,712,ls),
(978,731,o),
(945,750,o),
(928,741,qs),
(507,509,ls),
(500,505,o),
(493,509,qs),
(72,741,ls),
(55,750,o)
);
},
{
closed = 1;
nodes = (
(978,507,o),
(944,527,o),
(928,518,qs),
(507,286,ls),
(500,282,o),
(493,286,qs),
(72,518,ls),
(56,527,o),
(22,507,o),
(22,488,qs),
(22,447,ls),
(22,390,o),
(72,363,qs),
(450,154,ls),
(500,127,o),
(550,154,qs),
(928,363,ls),
(978,390,o),
(978,447,qs),
(978,488,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08471;
},
{
glyphname = parenleft.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(858,-118,o),
(870,-88,o),
(859,-77,qs),
(687,111,o),
(687,360,qs),
(687,595,o),
(860,795,qs),
(871,807,o),
(858,838,o),
(842,838,qs),
(815,838,ls),
(755,838,o),
(717,798,qs),
(631,708,o),
(532,480,o),
(532,360,qs),
(532,237,o),
(628,10,o),
(717,-79,qs),
(756,-118,o),
(815,-118,qs),
(842,-118,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF08;
unicode = 65288;
},
{
glyphname = parenright.full;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,-77,qs),
(130,-88,o),
(142,-118,o),
(158,-118,qs),
(185,-118,ls),
(244,-118,o),
(283,-79,qs),
(372,10,o),
(468,237,o),
(468,360,qs),
(468,480,o),
(369,708,o),
(283,798,qs),
(245,838,o),
(185,838,qs),
(158,838,ls),
(142,838,o),
(129,807,o),
(140,795,qs),
(313,595,o),
(313,360,qs),
(313,111,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF09;
unicode = 65289;
},
{
glyphname = tortoiseshellbracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,10,o),
(52,-23,o),
(74,-23,qs),
(78,-23,ls),
(103,-23,o),
(143,7,o),
(150,31,qs),
(206,238,ls),
(208,247,o),
(217,247,qs),
(783,247,ls),
(792,247,o),
(794,238,qs),
(850,31,ls),
(857,7,o),
(897,-23,o),
(922,-23,qs),
(926,-23,ls),
(948,-23,o),
(973,10,o),
(968,31,qs),
(886,339,ls),
(879,363,o),
(839,393,o),
(814,393,qs),
(186,393,ls),
(161,393,o),
(121,363,o),
(114,339,qs),
(32,31,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08479;
},
{
glyphname = tortoiseshellbracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(121,357,o),
(161,327,o),
(186,327,qs),
(814,327,ls),
(839,327,o),
(879,357,o),
(886,381,qs),
(968,689,ls),
(973,710,o),
(948,743,o),
(926,743,qs),
(922,743,ls),
(897,743,o),
(857,713,o),
(850,689,qs),
(794,482,ls),
(792,473,o),
(783,473,qs),
(217,473,ls),
(208,473,o),
(206,482,qs),
(150,689,ls),
(143,713,o),
(103,743,o),
(78,743,qs),
(74,743,ls),
(52,743,o),
(27,710,o),
(32,689,qs),
(114,381,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08480;
},
{
glyphname = whitecornerbracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(882,306,qs),
(882,17,ls),
(882,8,o),
(873,8,qs),
(812,8,ls),
(803,8,o),
(803,17,qs),
(803,180,ls),
(803,203,o),
(770,237,o),
(747,237,qs),
(250,237,ls),
(242,237,o),
(242,245,qs),
(242,306,ls),
(242,315,o),
(250,315,qs),
(873,315,ls),
(882,315,o)
);
},
{
closed = 1;
nodes = (
(155,207,ls),
(155,184,o),
(189,150,o),
(212,150,qs),
(708,150,ls),
(717,150,o),
(717,141,qs),
(717,-22,ls),
(717,-45,o),
(750,-78,o),
(773,-78,qs),
(912,-78,ls),
(935,-78,o),
(968,-45,o),
(968,-22,qs),
(968,345,ls),
(968,368,o),
(935,402,o),
(912,402,qs),
(212,402,ls),
(189,402,o),
(155,368,o),
(155,345,qs),
(155,315,l)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08474;
},
{
glyphname = whitecornerbracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,703,qs),
(197,540,ls),
(197,517,o),
(230,483,o),
(253,483,qs),
(750,483,ls),
(758,483,o),
(758,475,qs),
(758,414,ls),
(758,405,o),
(750,405,qs),
(127,405,ls),
(118,405,o),
(118,414,qs),
(118,703,ls),
(118,712,o),
(127,712,qs),
(188,712,ls),
(197,712,o)
);
},
{
closed = 1;
nodes = (
(32,352,o),
(65,318,o),
(88,318,qs),
(788,318,ls),
(811,318,o),
(845,352,o),
(845,375,qs),
(845,405,l),
(845,513,ls),
(845,536,o),
(811,570,o),
(788,570,qs),
(292,570,ls),
(283,570,o),
(283,579,qs),
(283,742,ls),
(283,765,o),
(250,798,o),
(227,798,qs),
(88,798,ls),
(65,798,o),
(32,765,o),
(32,742,qs),
(32,375,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08475;
},
{
glyphname = whitelenticularbracketleft.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(891,271,qs),
(891,124,ls),
(891,116,o),
(883,120,qs),
(704,218,o),
(296,218,o),
(117,120,qs),
(109,116,o),
(109,124,qs),
(109,271,ls),
(109,280,o),
(118,280,qs),
(882,280,ls),
(891,280,o)
);
},
{
closed = 1;
nodes = (
(22,-8,o),
(54,-22,o),
(67,-11,qs),
(256,132,o),
(744,132,o),
(933,-11,qs),
(946,-22,o),
(978,-8,o),
(978,8,qs),
(978,310,ls),
(978,333,o),
(944,367,o),
(921,367,qs),
(79,367,ls),
(56,367,o),
(22,333,o),
(22,310,qs),
(22,8,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08481;
},
{
glyphname = whitelenticularbracketright.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(706,502,o),
(883,599,qs),
(891,603,o),
(891,596,qs),
(891,448,ls),
(891,440,o),
(882,440,qs),
(118,440,ls),
(109,440,o),
(109,448,qs),
(109,596,ls),
(109,603,o),
(117,599,qs),
(294,502,o)
);
},
{
closed = 1;
nodes = (
(22,387,o),
(56,353,o),
(79,353,qs),
(921,353,ls),
(944,353,o),
(978,387,o),
(978,410,qs),
(978,712,ls),
(978,728,o),
(946,742,o),
(933,731,qs),
(744,588,o),
(256,588,o),
(67,731,qs),
(54,742,o),
(22,728,o),
(22,712,qs),
(22,410,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08482;
},
{
glyphname = braceleft.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(601,182,o),
(669,182,qs),
(769,182,ls),
(833,182,o),
(864,151,o),
(864,90,qs),
(864,30,ls),
(864,7,o),
(898,-27,o),
(944,-27,o),
(978,7,o),
(978,30,qs),
(978,167,ls),
(978,252,o),
(901,328,o),
(812,328,qs),
(674,328,ls),
(612,328,o),
(561,369,o),
(561,417,qs),
(561,430,ls),
(561,453,o),
(527,487,o),
(504,487,qs),
(496,487,ls),
(473,487,o),
(439,453,o),
(439,430,qs),
(439,417,ls),
(439,369,o),
(388,328,o),
(326,328,qs),
(188,328,ls),
(99,328,o),
(22,252,o),
(22,167,qs),
(22,30,ls),
(22,7,o),
(56,-27,o),
(102,-27,o),
(136,7,o),
(136,30,qs),
(136,90,ls),
(136,151,o),
(167,182,o),
(231,182,qs),
(331,182,ls),
(399,182,o),
(475,232,o),
(498,291,q),
(498,293,o),
(502,293,o),
(502,291,q),
(525,232,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08522;
},
{
glyphname = braceright.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,538,o),
(331,538,qs),
(231,538,ls),
(167,538,o),
(136,569,o),
(136,630,qs),
(136,690,ls),
(136,713,o),
(102,747,o),
(56,747,o),
(22,713,o),
(22,690,qs),
(22,553,ls),
(22,468,o),
(99,392,o),
(188,392,qs),
(326,392,ls),
(388,392,o),
(439,351,o),
(439,303,qs),
(439,290,ls),
(439,267,o),
(473,233,o),
(496,233,qs),
(504,233,ls),
(527,233,o),
(561,267,o),
(561,290,qs),
(561,303,ls),
(561,351,o),
(612,392,o),
(674,392,qs),
(812,392,ls),
(901,392,o),
(978,468,o),
(978,553,qs),
(978,690,ls),
(978,713,o),
(944,747,o),
(898,747,o),
(864,713,o),
(864,690,qs),
(864,630,ls),
(864,569,o),
(833,538,o),
(769,538,qs),
(669,538,ls),
(601,538,o),
(525,488,o),
(502,429,q),
(502,427,o),
(498,427,o),
(498,429,q),
(475,488,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08523;
},
{
glyphname = bracketleft.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,10,o),
(56,-23,o),
(102,-23,o),
(136,10,o),
(136,33,qs),
(136,238,ls),
(136,247,o),
(144,247,qs),
(856,247,ls),
(864,247,o),
(864,238,qs),
(864,33,ls),
(864,10,o),
(898,-23,o),
(944,-23,o),
(978,10,o),
(978,33,qs),
(978,337,ls),
(978,360,o),
(944,393,o),
(921,393,qs),
(79,393,ls),
(56,393,o),
(22,360,o),
(22,337,qs),
(22,33,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08520;
},
{
glyphname = bracketright.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,710,o),
(102,743,o),
(56,743,o),
(22,710,o),
(22,687,qs),
(22,383,ls),
(22,360,o),
(56,327,o),
(79,327,qs),
(921,327,ls),
(944,327,o),
(978,360,o),
(978,383,qs),
(978,687,ls),
(978,710,o),
(944,743,o),
(898,743,o),
(864,710,o),
(864,687,qs),
(864,482,ls),
(864,473,o),
(856,473,qs),
(144,473,ls),
(136,473,o),
(136,482,qs),
(136,687,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08521;
},
{
glyphname = parenleft.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,2,o),
(52,-10,o),
(63,1,qs),
(251,173,o),
(500,173,qs),
(735,173,o),
(935,0,qs),
(947,-11,o),
(978,2,o),
(978,18,qs),
(978,45,ls),
(978,105,o),
(938,143,qs),
(848,229,o),
(620,328,o),
(500,328,qs),
(377,328,o),
(150,232,o),
(61,143,qs),
(22,104,o),
(22,45,qs),
(22,18,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08516;
},
{
glyphname = parenright.full.vert;
lastChange = "2023-08-27 07:24:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,719,qs),
(52,730,o),
(22,718,o),
(22,702,qs),
(22,675,ls),
(22,616,o),
(61,577,qs),
(150,488,o),
(377,392,o),
(500,392,qs),
(620,392,o),
(848,491,o),
(938,577,qs),
(978,615,o),
(978,675,qs),
(978,702,ls),
(978,718,o),
(947,731,o),
(935,720,qs),
(735,547,o),
(500,547,qs),
(251,547,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08517;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = ExtraBold;
properties = (
{
key = postscriptFullName;
value = "Yaku Han RP ExtraBold";
},
{
key = postscriptFontName;
value = "YakuHanRP-ExtraBold";
}
);
weightClass = 800;
}
);
metrics = (
{
type = ascender;
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2016 The Rounded M+ Project Authors.";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "http://jikasei.me/";
}
);
settings = {
disablesAutomaticAlignment = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 59;
}
