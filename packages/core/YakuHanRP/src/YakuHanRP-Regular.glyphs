{
.appVersion = "3151";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = "M+  ";
},
{
name = panose;
value = (
2,
11,
5,
2,
2,
2,
3,
2,
2,
7
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
11,
24,
29,
30,
31,
32,
33,
35,
36,
37,
38,
39,
40,
42,
43,
44,
45,
46,
47,
48,
49,
50,
54,
57,
59,
61,
62,
65,
68,
89
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1253",
"1254",
"1255",
"1257",
"1258",
"932",
"950",
"bit 29",
"bit 30",
"869",
"866",
"865",
"863",
"862",
"861",
"860",
"857",
"855",
"852",
"775",
"737",
"850",
"437"
);
},
{
name = fsType;
value = (
);
}
);
date = "2015-05-28 17:09:00 +0000";
familyName = "Yaku Han RP";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature vert;
feature vrt2;
";
tag = aalt;
},
{
automatic = 1;
code = "sub comma-han by comma-han.vert;
sub period-han by period-han.vert;
sub colon.full by colon.full.vert;
sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vert;
},
{
automatic = 1;
code = "sub comma-han by comma-han.vert;
sub period-han by period-han.vert;
sub colon.full by colon.full.vert;
sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vrt2;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 860;
},
{
name = typoDescender;
value = -140;
},
{
name = typoLineGap;
value = 90;
},
{
name = winAscent;
value = 1075;
},
{
name = winDescent;
value = 320;
},
{
name = hheaAscender;
value = 1075;
},
{
name = hheaDescender;
value = -320;
},
{
name = strikeoutPosition;
value = 258;
},
{
name = strikeoutSize;
value = 49;
},
{
name = "prep Table Assembly";
value = "PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SCANTYPE[ ]	/* ScanType */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01270 6 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012EIF[ ]	/* EndIf */\012SCVTCI[ ]	/* SetCVTCutIn */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP0[ ]	/* SetZonePointer0 */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01274 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012MIAP[1]	/* MoveIndirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10100]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012ROUND[01]	/* Round */\012RTG[ ]	/* RoundToGrid */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ROFF[ ]	/* RoundOff */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012IF[ ]	/* If */\012MIRP[11101]	/* MoveIndirectRelPt */\012ELSE[ ]	/* Else */\012MIRP[01101]	/* MoveIndirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01270 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012GFV[ ]	/* GetFVector */\012NOT[ ]	/* LogicalNot */\012AND[ ]	/* LogicalAnd */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01234 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012MDRP[00100]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012ELSE[ ]	/* Else */\012SRP0[ ]	/* SetRefPoint0 */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012NEG[ ]	/* Negate */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012MDRP[10110]	/* MoveDirectRelPt */\012RTG[ ]	/* RoundToGrid */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[0]	/* MeasureDistance */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SPVTL[1]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012MDRP[00000]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 64 1 64 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0120 32 0 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0121 32 1 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01225 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    \"-220\",\012    0,\012    520,\012    730,\012    750,\012    33,\012    633\012)";
}
);
id = m01;
metricValues = (
{
pos = 860;
},
{
},
{
pos = -140;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 364;
}
);
note = ".notdef";
},
{
glyphname = space;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 270;
}
);
note = space;
unicode = 32;
},
{
glyphname = nbspace;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 270;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = "comma-han";
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,-44,o),
(287,-34,qs),
(300,-24,o),
(303,10,o),
(292,23,qs),
(203,123,o),
(148,180,qs),
(136,192,o),
(101,192,o),
(75,170,o),
(75,136,o),
(87,124,qs),
(172,37,o),
(228,-28,qs),
(239,-41,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3001;
unicode = 12289;
},
{
glyphname = "comma-han.vert";
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(896,527,o),
(910,537,qs),
(923,547,o),
(926,581,o),
(915,594,qs),
(826,694,o),
(771,751,qs),
(759,763,o),
(724,763,o),
(698,741,o),
(698,707,o),
(710,695,qs),
(795,608,o),
(851,543,qs),
(862,530,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08466;
},
{
glyphname = "period-han";
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,36,o),
(254,-19,o),
(176,-19,o),
(121,36,o),
(121,114,o),
(176,168,o),
(254,168,o),
(308,114,o)
);
},
{
closed = 1;
nodes = (
(368,139,o),
(279,228,o),
(151,228,o),
(61,139,o),
(61,11,o),
(151,-79,o),
(279,-79,o),
(368,11,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3002;
unicode = 12290;
},
{
glyphname = "period-han.vert";
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(879,607,o),
(825,552,o),
(747,552,o),
(692,607,o),
(692,685,o),
(747,739,o),
(825,739,o),
(879,685,o)
);
},
{
closed = 1;
nodes = (
(939,710,o),
(850,799,o),
(722,799,o),
(632,710,o),
(632,582,o),
(722,492,o),
(850,492,o),
(939,582,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08467;
},
{
glyphname = "dot-kata";
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(553,343,qs),
(553,377,ls),
(553,399,o),
(522,430,o),
(478,430,o),
(447,399,o),
(447,377,qs),
(447,343,ls),
(447,321,o),
(478,290,o),
(522,290,o),
(553,321,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni30FB;
unicode = 12539;
},
{
glyphname = hyphenationpoint;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,267,qs),
(224,313,ls),
(224,332,o),
(196,360,o),
(158,360,o),
(130,332,o),
(130,313,qs),
(130,267,ls),
(130,248,o),
(158,220,o),
(196,220,o),
(224,248,o)
);
}
);
vertWidth = 1000;
width = 354;
}
);
note = uni2027;
unicode = 8231;
},
{
glyphname = colon.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(547,123,qs),
(547,167,ls),
(547,186,o),
(520,213,o),
(480,213,o),
(453,186,o),
(453,167,qs),
(453,123,ls),
(453,104,o),
(480,77,o),
(520,77,o),
(547,104,o)
);
},
{
closed = 1;
nodes = (
(547,553,qs),
(547,597,ls),
(547,616,o),
(520,643,o),
(480,643,o),
(453,616,o),
(453,597,qs),
(453,553,ls),
(453,534,o),
(480,507,o),
(520,507,o),
(547,534,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1A;
unicode = 65306;
},
{
glyphname = exclam.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(537,240,qs),
(546,683,ls),
(546,703,o),
(519,730,o),
(481,730,o),
(454,703,o),
(454,683,qs),
(463,240,ls),
(463,225,o),
(485,203,o),
(515,203,o),
(537,225,o)
);
},
{
closed = 1;
nodes = (
(457,80,qs),
(457,43,ls),
(457,25,o),
(482,0,o),
(518,0,o),
(543,25,o),
(543,43,qs),
(543,80,ls),
(543,98,o),
(518,123,o),
(482,123,o),
(457,98,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF01;
unicode = 65281;
},
{
glyphname = question.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(495,672,qs),
(685,672,o),
(685,570,qs),
(685,536,o),
(647,479,o),
(608,450,o),
(569,426,qs),
(537,406,o),
(503,381,o),
(454,336,o),
(426,281,o),
(420,247,qs),
(417,231,o),
(440,207,o),
(457,207,qs),
(473,207,o),
(498,229,o),
(501,246,qs),
(508,281,o),
(553,339,o),
(595,370,o),
(633,393,qs),
(667,414,o),
(702,440,o),
(748,485,o),
(768,541,o),
(768,577,qs),
(768,653,o),
(631,740,o),
(505,740,qs),
(390,740,o),
(282,714,qs),
(268,710,o),
(252,685,o),
(258,657,o),
(283,642,o),
(296,646,qs),
(399,672,o)
);
},
{
closed = 1;
nodes = (
(413,25,o),
(439,0,o),
(475,0,o),
(500,25,o),
(500,43,qs),
(500,80,ls),
(500,98,o),
(475,123,o),
(439,123,o),
(413,98,o),
(413,80,qs),
(413,43,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1F;
unicode = 65311;
},
{
glyphname = semicolon.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,1,qs),
(545,167,ls),
(552,184,o),
(532,213,o),
(514,213,qs),
(492,213,o),
(455,186,o),
(449,165,qs),
(401,2,ls),
(397,-11,o),
(413,-33,o),
(427,-33,qs),
(465,-33,o)
);
},
{
closed = 1;
nodes = (
(458,597,qs),
(458,553,ls),
(458,534,o),
(485,507,o),
(525,507,o),
(552,534,o),
(552,553,qs),
(552,597,ls),
(552,616,o),
(525,643,o),
(485,643,o),
(458,616,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1B;
unicode = 65307;
},
{
glyphname = colon.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(547,123,qs),
(547,167,ls),
(547,186,o),
(520,213,o),
(480,213,o),
(453,186,o),
(453,167,qs),
(453,123,ls),
(453,104,o),
(480,77,o),
(520,77,o),
(547,104,o)
);
},
{
closed = 1;
nodes = (
(547,553,qs),
(547,597,ls),
(547,616,o),
(520,643,o),
(480,643,o),
(453,616,o),
(453,597,qs),
(453,553,ls),
(453,534,o),
(480,507,o),
(520,507,o),
(547,534,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08518;
},
{
glyphname = angleLeft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,-140,qs),
(346,-140,o),
(359,-116,o),
(352,-105,qs),
(104,308,ls),
(99,315,o),
(104,322,qs),
(352,735,ls),
(359,746,o),
(346,770,o),
(332,770,qs),
(292,770,o),
(272,735,qs),
(48,364,ls),
(35,342,o),
(35,288,o),
(48,266,qs),
(272,-105,ls),
(292,-140,o)
);
}
);
vertWidth = 1000;
width = 396;
}
);
note = angleleft;
unicode = 9001;
},
{
glyphname = angleRight;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,-140,o),
(63,-140,qs),
(104,-140,o),
(124,-105,qs),
(347,266,ls),
(361,288,o),
(361,342,o),
(347,364,qs),
(124,735,ls),
(104,770,o),
(63,770,qs),
(50,770,o),
(36,746,o),
(43,735,qs),
(291,322,ls),
(296,315,o),
(291,308,qs),
(43,-105,ls),
(36,-116,o)
);
}
);
vertWidth = 1000;
width = 396;
}
);
note = angleright;
unicode = 9002;
},
{
glyphname = anglebracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(862,-95,qs),
(875,-95,o),
(889,-71,o),
(882,-60,qs),
(634,353,ls),
(629,360,o),
(634,367,qs),
(882,780,ls),
(889,791,o),
(875,815,o),
(862,815,qs),
(822,815,o),
(801,780,qs),
(578,409,ls),
(549,360,o),
(578,311,qs),
(801,-60,ls),
(822,-95,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3008;
unicode = 12296;
},
{
glyphname = anglebracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,791,o),
(118,780,qs),
(366,367,ls),
(371,360,o),
(366,353,qs),
(118,-60,ls),
(111,-71,o),
(125,-95,o),
(138,-95,qs),
(178,-95,o),
(199,-60,qs),
(422,311,ls),
(451,360,o),
(422,409,qs),
(199,780,ls),
(178,815,o),
(138,815,qs),
(125,815,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3009;
unicode = 12297;
},
{
glyphname = blacklenticularbracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(863,-95,o),
(875,-66,o),
(864,-54,qs),
(787,33,o),
(703,247,o),
(703,473,o),
(787,687,o),
(864,774,qs),
(875,786,o),
(863,815,o),
(847,815,qs),
(667,815,ls),
(644,815,o),
(610,781,o),
(610,758,qs),
(610,-38,ls),
(610,-61,o),
(644,-95,o),
(667,-95,qs),
(847,-95,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3010;
unicode = 12304;
},
{
glyphname = blacklenticularbracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,-95,o),
(390,-61,o),
(390,-38,qs),
(390,758,ls),
(390,781,o),
(356,815,o),
(333,815,qs),
(153,815,ls),
(137,815,o),
(125,786,o),
(136,774,qs),
(213,687,o),
(297,473,o),
(297,247,o),
(213,33,o),
(136,-54,qs),
(125,-66,o),
(137,-95,o),
(153,-95,qs),
(333,-95,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3011;
unicode = 12305;
},
{
glyphname = braceleft.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(658,512,qs),
(658,645,ls),
(658,713,o),
(701,755,o),
(755,755,qs),
(862,755,ls),
(875,755,o),
(892,772,o),
(892,798,o),
(875,815,o),
(862,815,qs),
(722,815,ls),
(650,815,o),
(585,745,o),
(585,665,qs),
(585,515,ls),
(585,392,o),
(502,392,qs),
(460,392,ls),
(447,392,o),
(428,373,o),
(428,360,qs),
(428,346,o),
(446,328,o),
(460,328,qs),
(502,328,ls),
(585,328,o),
(585,205,qs),
(585,55,ls),
(585,-25,o),
(650,-95,o),
(722,-95,qs),
(862,-95,ls),
(875,-95,o),
(892,-78,o),
(892,-52,o),
(875,-35,o),
(862,-35,qs),
(755,-35,ls),
(701,-35,o),
(658,7,o),
(658,75,qs),
(658,208,ls),
(658,320,o),
(576,358,q),
(575,358,o),
(575,362,o),
(576,362,q),
(658,400,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF5B;
unicode = 65371;
},
{
glyphname = braceright.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,208,qs),
(342,75,ls),
(342,7,o),
(299,-35,o),
(245,-35,qs),
(138,-35,ls),
(125,-35,o),
(108,-52,o),
(108,-78,o),
(125,-95,o),
(138,-95,qs),
(278,-95,ls),
(350,-95,o),
(415,-25,o),
(415,55,qs),
(415,205,ls),
(415,328,o),
(498,328,qs),
(540,328,ls),
(553,328,o),
(572,347,o),
(572,373,o),
(553,392,o),
(540,392,qs),
(498,392,ls),
(415,392,o),
(415,515,qs),
(415,665,ls),
(415,745,o),
(350,815,o),
(278,815,qs),
(138,815,ls),
(125,815,o),
(108,798,o),
(108,772,o),
(125,755,o),
(138,755,qs),
(245,755,ls),
(299,755,o),
(342,713,o),
(342,645,qs),
(342,512,ls),
(342,400,o),
(424,362,q),
(425,362,o),
(425,358,o),
(424,358,q),
(342,320,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF5D;
unicode = 65373;
},
{
glyphname = cornerbracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(623,103,qs),
(623,752,ls),
(623,760,o),
(632,760,qs),
(902,760,ls),
(915,760,o),
(933,779,o),
(933,805,o),
(915,823,o),
(902,823,qs),
(607,823,ls),
(584,823,o),
(550,790,o),
(550,767,qs),
(550,103,ls),
(550,88,o),
(572,67,o),
(602,67,o),
(623,88,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300C;
unicode = 12300;
},
{
glyphname = cornerbracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,-103,o),
(450,-70,o),
(450,-47,qs),
(450,617,ls),
(450,632,o),
(428,653,o),
(398,653,o),
(377,632,o),
(377,617,qs),
(377,-31,ls),
(377,-40,o),
(368,-40,qs),
(98,-40,ls),
(85,-40,o),
(67,-59,o),
(67,-85,o),
(85,-103,o),
(98,-103,qs),
(393,-103,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300D;
unicode = 12301;
},
{
glyphname = dblanglebracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(877,815,o),
(864,815,qs),
(824,815,o),
(805,782,qs),
(581,409,ls),
(552,360,o),
(581,311,qs),
(805,-62,ls),
(824,-95,o),
(864,-95,qs),
(877,-95,o),
(890,-73,o),
(883,-62,qs),
(634,353,ls),
(629,360,o),
(634,367,qs),
(883,782,ls),
(890,793,o)
);
},
{
closed = 1;
nodes = (
(711,-95,qs),
(724,-95,o),
(737,-73,o),
(730,-62,qs),
(481,353,ls),
(476,360,o),
(481,367,qs),
(730,782,ls),
(737,793,o),
(724,815,o),
(711,815,qs),
(671,815,o),
(652,782,qs),
(428,409,ls),
(399,360,o),
(428,311,qs),
(652,-62,ls),
(671,-95,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300A;
unicode = 12298;
},
{
glyphname = dblanglebracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-95,o),
(136,-95,qs),
(176,-95,o),
(195,-62,qs),
(419,311,ls),
(448,360,o),
(419,409,qs),
(195,782,ls),
(176,815,o),
(136,815,qs),
(123,815,o),
(110,793,o),
(117,782,qs),
(366,367,ls),
(371,360,o),
(366,353,qs),
(117,-62,ls),
(110,-73,o)
);
},
{
closed = 1;
nodes = (
(263,793,o),
(270,782,qs),
(519,367,ls),
(524,360,o),
(519,353,qs),
(270,-62,ls),
(263,-73,o),
(276,-95,o),
(289,-95,qs),
(329,-95,o),
(348,-62,qs),
(572,311,ls),
(601,360,o),
(572,409,qs),
(348,782,ls),
(329,815,o),
(289,815,qs),
(276,815,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300B;
unicode = 12299;
},
{
glyphname = tortoiseshellbracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(859,-94,o),
(878,-80,o),
(878,-69,qs),
(878,-37,o),
(849,-27,qs),
(610,54,ls),
(602,57,o),
(602,65,qs),
(602,655,ls),
(602,663,o),
(610,666,qs),
(849,747,ls),
(878,757,o),
(878,789,qs),
(878,800,o),
(859,814,o),
(848,810,qs),
(582,721,ls),
(558,713,o),
(528,672,o),
(528,647,qs),
(528,73,ls),
(528,48,o),
(558,7,o),
(582,-1,qs),
(848,-90,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3014;
unicode = 12308;
},
{
glyphname = tortoiseshellbracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,-37,o),
(122,-69,qs),
(122,-80,o),
(140,-94,o),
(151,-90,qs),
(418,-1,ls),
(442,7,o),
(472,48,o),
(472,73,qs),
(472,647,ls),
(472,672,o),
(442,713,o),
(418,721,qs),
(151,810,ls),
(140,814,o),
(122,800,o),
(122,789,qs),
(122,757,o),
(151,747,qs),
(390,666,ls),
(398,663,o),
(398,655,qs),
(398,65,ls),
(398,57,o),
(390,54,qs),
(151,-27,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3015;
unicode = 12309;
},
{
glyphname = whitecornerbracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(569,777,qs),
(878,777,ls),
(887,777,o),
(887,768,qs),
(887,712,ls),
(887,703,o),
(878,703,qs),
(690,703,ls),
(667,703,o),
(633,670,o),
(633,647,qs),
(633,85,ls),
(633,77,o),
(625,77,qs),
(569,77,ls),
(560,77,o),
(560,85,qs),
(560,768,ls),
(560,777,o)
);
},
{
closed = 1;
nodes = (
(646,30,o),
(680,64,o),
(680,87,qs),
(680,648,ls),
(680,657,o),
(689,657,qs),
(877,657,ls),
(900,657,o),
(933,690,o),
(933,713,qs),
(933,767,ls),
(933,790,o),
(900,823,o),
(877,823,qs),
(570,823,ls),
(547,823,o),
(513,790,o),
(513,767,qs),
(513,87,ls),
(513,64,o),
(547,30,o),
(570,30,qs),
(623,30,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300E;
unicode = 12302;
},
{
glyphname = whitecornerbracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,17,qs),
(310,17,ls),
(333,17,o),
(367,50,o),
(367,73,qs),
(367,635,ls),
(367,643,o),
(375,643,qs),
(432,643,ls),
(440,643,o),
(440,635,qs),
(440,-48,ls),
(440,-57,o),
(432,-57,qs),
(122,-57,ls),
(113,-57,o),
(113,-48,qs),
(113,8,ls),
(113,17,o)
);
},
{
closed = 1;
nodes = (
(453,-103,o),
(487,-70,o),
(487,-47,qs),
(487,633,ls),
(487,656,o),
(453,690,o),
(430,690,qs),
(377,690,ls),
(354,690,o),
(320,656,o),
(320,633,qs),
(320,72,ls),
(320,63,o),
(311,63,qs),
(123,63,ls),
(100,63,o),
(67,30,o),
(67,7,qs),
(67,-47,ls),
(67,-70,o),
(100,-103,o),
(123,-103,qs),
(430,-103,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300F;
unicode = 12303;
},
{
glyphname = whitelenticularbracketleft;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(619,768,qs),
(802,768,ls),
(809,768,o),
(805,762,qs),
(677,585,o),
(677,135,o),
(805,-42,qs),
(809,-48,o),
(802,-48,qs),
(619,-48,ls),
(610,-48,o),
(610,-40,qs),
(610,760,ls),
(610,768,o)
);
},
{
closed = 1;
nodes = (
(863,-95,o),
(877,-66,o),
(866,-53,qs),
(798,33,o),
(723,248,o),
(723,472,o),
(798,687,o),
(866,773,qs),
(877,786,o),
(863,815,o),
(847,815,qs),
(620,815,ls),
(597,815,o),
(563,781,o),
(563,758,qs),
(563,-38,ls),
(563,-61,o),
(597,-95,o),
(620,-95,qs),
(847,-95,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3016;
unicode = 12310;
},
{
glyphname = whitelenticularbracketright;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,585,o),
(195,762,qs),
(191,768,o),
(198,768,qs),
(382,768,ls),
(390,768,o),
(390,760,qs),
(390,-40,ls),
(390,-48,o),
(382,-48,qs),
(198,-48,ls),
(191,-48,o),
(195,-42,qs),
(323,135,o)
);
},
{
closed = 1;
nodes = (
(403,-95,o),
(437,-61,o),
(437,-38,qs),
(437,758,ls),
(437,781,o),
(403,815,o),
(380,815,qs),
(153,815,ls),
(137,815,o),
(123,786,o),
(134,773,qs),
(202,687,o),
(277,472,o),
(277,248,o),
(202,33,o),
(134,-53,qs),
(123,-66,o),
(137,-95,o),
(153,-95,qs),
(380,-95,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3017;
unicode = 12311;
},
{
glyphname = anglebracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,-2,qs),
(45,-15,o),
(69,-29,o),
(80,-22,qs),
(493,226,ls),
(500,231,o),
(507,226,qs),
(920,-22,ls),
(931,-29,o),
(955,-15,o),
(955,-2,qs),
(955,38,o),
(920,59,qs),
(549,282,ls),
(500,311,o),
(451,282,qs),
(80,59,ls),
(45,38,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08468;
},
{
glyphname = anglebracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(931,749,o),
(920,742,qs),
(507,494,ls),
(500,489,o),
(493,494,qs),
(80,742,ls),
(69,749,o),
(45,735,o),
(45,722,qs),
(45,682,o),
(80,661,qs),
(451,438,ls),
(500,409,o),
(549,438,qs),
(920,661,ls),
(955,682,o),
(955,722,qs),
(955,735,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08469;
},
{
glyphname = blacklenticularbracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,-3,o),
(74,-15,o),
(86,-4,qs),
(173,73,o),
(387,157,o),
(613,157,o),
(827,73,o),
(914,-4,qs),
(926,-15,o),
(955,-3,o),
(955,13,qs),
(955,193,ls),
(955,216,o),
(921,250,o),
(898,250,qs),
(102,250,ls),
(79,250,o),
(45,216,o),
(45,193,qs),
(45,13,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08476;
},
{
glyphname = blacklenticularbracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,504,o),
(79,470,o),
(102,470,qs),
(898,470,ls),
(921,470,o),
(955,504,o),
(955,527,qs),
(955,707,ls),
(955,723,o),
(926,735,o),
(914,724,qs),
(827,647,o),
(613,563,o),
(387,563,o),
(173,647,o),
(86,724,qs),
(74,735,o),
(45,723,o),
(45,707,qs),
(45,527,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08477;
},
{
glyphname = bracketleft.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(861,-95,o),
(878,-78,o),
(878,-52,o),
(861,-35,o),
(848,-35,qs),
(610,-35,ls),
(602,-35,o),
(602,-26,qs),
(602,746,ls),
(602,755,o),
(610,755,qs),
(848,755,ls),
(861,755,o),
(878,772,o),
(878,798,o),
(861,815,o),
(848,815,qs),
(585,815,ls),
(562,815,o),
(528,781,o),
(528,758,qs),
(528,-38,ls),
(528,-61,o),
(562,-95,o),
(585,-95,qs),
(848,-95,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF3B;
unicode = 65339;
},
{
glyphname = bracketright.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,-35,o),
(122,-52,o),
(122,-78,o),
(139,-95,o),
(152,-95,qs),
(415,-95,ls),
(438,-95,o),
(472,-61,o),
(472,-38,qs),
(472,758,ls),
(472,781,o),
(438,815,o),
(415,815,qs),
(152,815,ls),
(139,815,o),
(122,798,o),
(122,772,o),
(139,755,o),
(152,755,qs),
(390,755,ls),
(398,755,o),
(398,746,qs),
(398,-27,ls),
(398,-35,o),
(390,-35,qs),
(152,-35,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF3D;
unicode = 65341;
},
{
glyphname = cornerbracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,237,qs),
(892,237,ls),
(900,237,o),
(900,228,qs),
(900,-42,ls),
(900,-55,o),
(919,-73,o),
(945,-73,o),
(963,-55,o),
(963,-42,qs),
(963,253,ls),
(963,276,o),
(930,310,o),
(907,310,qs),
(243,310,ls),
(228,310,o),
(207,288,o),
(207,258,o),
(228,237,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08472;
},
{
glyphname = cornerbracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,444,o),
(70,410,o),
(93,410,qs),
(757,410,ls),
(772,410,o),
(793,432,o),
(793,462,o),
(772,483,o),
(757,483,qs),
(109,483,ls),
(100,483,o),
(100,492,qs),
(100,762,ls),
(100,775,o),
(81,793,o),
(55,793,o),
(37,775,o),
(37,762,qs),
(37,467,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08473;
},
{
glyphname = dblanglebracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(955,-17,o),
(955,-4,qs),
(955,36,o),
(922,55,qs),
(549,279,ls),
(500,308,o),
(451,279,qs),
(78,55,ls),
(45,36,o),
(45,-4,qs),
(45,-17,o),
(67,-30,o),
(78,-23,qs),
(493,226,ls),
(500,231,o),
(507,226,qs),
(922,-23,ls),
(933,-30,o)
);
},
{
closed = 1;
nodes = (
(45,149,qs),
(45,136,o),
(67,123,o),
(78,130,qs),
(493,379,ls),
(500,384,o),
(507,379,qs),
(922,130,ls),
(933,123,o),
(955,136,o),
(955,149,qs),
(955,189,o),
(922,208,qs),
(549,432,ls),
(500,461,o),
(451,432,qs),
(78,208,ls),
(45,189,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08470;
},
{
glyphname = dblanglebracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,737,o),
(45,724,qs),
(45,684,o),
(78,665,qs),
(451,441,ls),
(500,412,o),
(549,441,qs),
(922,665,ls),
(955,684,o),
(955,724,qs),
(955,737,o),
(933,750,o),
(922,743,qs),
(507,494,ls),
(500,489,o),
(493,494,qs),
(78,743,ls),
(67,750,o)
);
},
{
closed = 1;
nodes = (
(933,597,o),
(922,590,qs),
(507,341,ls),
(500,336,o),
(493,341,qs),
(78,590,ls),
(67,597,o),
(45,584,o),
(45,571,qs),
(45,531,o),
(78,512,qs),
(451,288,ls),
(500,259,o),
(549,288,qs),
(922,512,ls),
(955,531,o),
(955,571,qs),
(955,584,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08471;
},
{
glyphname = parenleft.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(846,-95,qs),
(855,-95,o),
(863,-75,o),
(856,-69,qs),
(668,108,o),
(668,612,o),
(856,789,qs),
(863,796,o),
(856,815,o),
(846,815,qs),
(805,815,o),
(779,790,qs),
(592,615,o),
(592,105,o),
(779,-70,qs),
(805,-95,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF08;
unicode = 65288;
},
{
glyphname = parenright.full;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,-95,o),
(154,-95,qs),
(195,-95,o),
(221,-70,qs),
(408,105,o),
(408,615,o),
(221,790,qs),
(195,815,o),
(154,815,qs),
(145,815,o),
(137,795,o),
(144,789,qs),
(332,612,o),
(332,108,o),
(144,-69,qs),
(137,-76,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF09;
unicode = 65289;
},
{
glyphname = tortoiseshellbracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,1,o),
(60,-18,o),
(71,-18,qs),
(103,-18,o),
(113,11,qs),
(194,250,ls),
(197,258,o),
(205,258,qs),
(795,258,ls),
(803,258,o),
(806,250,qs),
(887,11,ls),
(897,-18,o),
(929,-18,qs),
(940,-18,o),
(954,1,o),
(950,12,qs),
(861,278,ls),
(853,302,o),
(812,332,o),
(787,332,qs),
(213,332,ls),
(188,332,o),
(147,302,o),
(139,278,qs),
(50,12,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08479;
},
{
glyphname = tortoiseshellbracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,738,o),
(71,738,qs),
(60,738,o),
(46,720,o),
(50,709,qs),
(139,442,ls),
(147,418,o),
(188,388,o),
(213,388,qs),
(787,388,ls),
(812,388,o),
(853,418,o),
(861,442,qs),
(950,709,ls),
(954,720,o),
(940,738,o),
(929,738,qs),
(897,738,o),
(887,709,qs),
(806,470,ls),
(803,462,o),
(795,462,qs),
(205,462,ls),
(197,462,o),
(194,470,qs),
(113,709,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08480;
},
{
glyphname = whitecornerbracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(917,291,qs),
(917,-18,ls),
(917,-27,o),
(908,-27,qs),
(852,-27,ls),
(843,-27,o),
(843,-18,qs),
(843,170,ls),
(843,193,o),
(810,227,o),
(787,227,qs),
(225,227,ls),
(217,227,o),
(217,235,qs),
(217,291,ls),
(217,300,o),
(225,300,qs),
(908,300,ls),
(917,300,o)
);
},
{
closed = 1;
nodes = (
(170,214,o),
(204,180,o),
(227,180,qs),
(788,180,ls),
(797,180,o),
(797,171,qs),
(797,-17,ls),
(797,-40,o),
(830,-73,o),
(853,-73,qs),
(907,-73,ls),
(930,-73,o),
(963,-40,o),
(963,-17,qs),
(963,290,ls),
(963,313,o),
(930,347,o),
(907,347,qs),
(227,347,ls),
(204,347,o),
(170,313,o),
(170,290,qs),
(170,237,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08474;
},
{
glyphname = whitecornerbracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,738,qs),
(157,550,ls),
(157,527,o),
(190,493,o),
(213,493,qs),
(775,493,ls),
(783,493,o),
(783,485,qs),
(783,428,ls),
(783,420,o),
(775,420,qs),
(92,420,ls),
(83,420,o),
(83,428,qs),
(83,738,ls),
(83,747,o),
(92,747,qs),
(148,747,ls),
(157,747,o)
);
},
{
closed = 1;
nodes = (
(37,407,o),
(70,373,o),
(93,373,qs),
(773,373,ls),
(796,373,o),
(830,407,o),
(830,430,qs),
(830,483,ls),
(830,506,o),
(796,540,o),
(773,540,qs),
(212,540,ls),
(203,540,o),
(203,549,qs),
(203,737,ls),
(203,760,o),
(170,793,o),
(147,793,qs),
(93,793,ls),
(70,793,o),
(37,760,o),
(37,737,qs),
(37,430,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08475;
},
{
glyphname = whitelenticularbracketleft.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(908,241,qs),
(908,58,ls),
(908,51,o),
(902,55,qs),
(725,183,o),
(275,183,o),
(98,55,qs),
(92,51,o),
(92,58,qs),
(92,241,ls),
(92,250,o),
(100,250,qs),
(900,250,ls),
(908,250,o)
);
},
{
closed = 1;
nodes = (
(45,-3,o),
(74,-17,o),
(87,-6,qs),
(173,62,o),
(388,137,o),
(612,137,o),
(827,62,o),
(913,-6,qs),
(926,-17,o),
(955,-3,o),
(955,13,qs),
(955,240,ls),
(955,263,o),
(921,297,o),
(898,297,qs),
(102,297,ls),
(79,297,o),
(45,263,o),
(45,240,qs),
(45,13,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08481;
},
{
glyphname = whitelenticularbracketright.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(725,537,o),
(902,665,qs),
(908,669,o),
(908,662,qs),
(908,478,ls),
(908,470,o),
(900,470,qs),
(100,470,ls),
(92,470,o),
(92,478,qs),
(92,662,ls),
(92,669,o),
(98,665,qs),
(275,537,o)
);
},
{
closed = 1;
nodes = (
(45,457,o),
(79,423,o),
(102,423,qs),
(898,423,ls),
(921,423,o),
(955,457,o),
(955,480,qs),
(955,707,ls),
(955,723,o),
(926,737,o),
(913,726,qs),
(827,658,o),
(612,583,o),
(388,583,o),
(173,658,o),
(87,726,qs),
(74,737,o),
(45,723,o),
(45,707,qs),
(45,480,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08482;
},
{
glyphname = braceleft.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(652,202,qs),
(785,202,ls),
(853,202,o),
(895,159,o),
(895,105,qs),
(895,-2,ls),
(895,-15,o),
(912,-32,o),
(938,-32,o),
(955,-15,o),
(955,-2,qs),
(955,138,ls),
(955,210,o),
(885,275,o),
(805,275,qs),
(655,275,ls),
(532,275,o),
(532,358,qs),
(532,400,ls),
(532,413,o),
(513,432,o),
(500,432,qs),
(486,432,o),
(468,414,o),
(468,400,qs),
(468,358,ls),
(468,275,o),
(345,275,qs),
(195,275,ls),
(115,275,o),
(45,210,o),
(45,138,qs),
(45,-2,ls),
(45,-15,o),
(62,-32,o),
(88,-32,o),
(105,-15,o),
(105,-2,qs),
(105,105,ls),
(105,159,o),
(147,202,o),
(215,202,qs),
(348,202,ls),
(460,202,o),
(498,284,q),
(498,285,o),
(502,285,o),
(502,284,q),
(540,202,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08522;
},
{
glyphname = braceright.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,518,qs),
(215,518,ls),
(147,518,o),
(105,561,o),
(105,615,qs),
(105,722,ls),
(105,735,o),
(88,752,o),
(62,752,o),
(45,735,o),
(45,722,qs),
(45,582,ls),
(45,510,o),
(115,445,o),
(195,445,qs),
(345,445,ls),
(468,445,o),
(468,362,qs),
(468,320,ls),
(468,307,o),
(487,288,o),
(513,288,o),
(532,307,o),
(532,320,qs),
(532,362,ls),
(532,445,o),
(655,445,qs),
(805,445,ls),
(885,445,o),
(955,510,o),
(955,582,qs),
(955,722,ls),
(955,735,o),
(938,752,o),
(912,752,o),
(895,735,o),
(895,722,qs),
(895,615,ls),
(895,561,o),
(853,518,o),
(785,518,qs),
(652,518,ls),
(540,518,o),
(502,436,q),
(502,435,o),
(498,435,o),
(498,436,q),
(460,518,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08523;
},
{
glyphname = bracketleft.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,-1,o),
(62,-18,o),
(88,-18,o),
(105,-1,o),
(105,12,qs),
(105,250,ls),
(105,258,o),
(114,258,qs),
(886,258,ls),
(895,258,o),
(895,250,qs),
(895,12,ls),
(895,-1,o),
(912,-18,o),
(938,-18,o),
(955,-1,o),
(955,12,qs),
(955,275,ls),
(955,298,o),
(921,332,o),
(898,332,qs),
(102,332,ls),
(79,332,o),
(45,298,o),
(45,275,qs),
(45,12,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08520;
},
{
glyphname = bracketright.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,721,o),
(88,738,o),
(62,738,o),
(45,721,o),
(45,708,qs),
(45,445,ls),
(45,422,o),
(79,388,o),
(102,388,qs),
(898,388,ls),
(921,388,o),
(955,422,o),
(955,445,qs),
(955,708,ls),
(955,721,o),
(938,738,o),
(912,738,o),
(895,721,o),
(895,708,qs),
(895,470,ls),
(895,462,o),
(886,462,qs),
(113,462,ls),
(105,462,o),
(105,470,qs),
(105,708,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08521;
},
{
glyphname = parenleft.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,14,qs),
(45,5,o),
(65,-3,o),
(71,4,qs),
(248,192,o),
(752,192,o),
(929,4,qs),
(936,-3,o),
(955,4,o),
(955,14,qs),
(955,55,o),
(930,81,qs),
(755,268,o),
(245,268,o),
(70,81,qs),
(45,55,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08516;
},
{
glyphname = parenright.full.vert;
lastChange = "2023-08-27 07:25:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,716,o),
(45,706,qs),
(45,665,o),
(70,639,qs),
(245,452,o),
(755,452,o),
(930,639,qs),
(955,665,o),
(955,706,qs),
(955,715,o),
(935,723,o),
(929,716,qs),
(752,528,o),
(248,528,o),
(71,716,qs),
(64,723,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08517;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFullName;
value = "Yaku Han RP Regular";
},
{
key = postscriptFontName;
value = "YakuHanRP-Regular";
}
);
}
);
metrics = (
{
type = ascender;
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2016 The Rounded M+ Project Authors.";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "http://jikasei.me/";
}
);
settings = {
disablesAutomaticAlignment = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 59;
}
