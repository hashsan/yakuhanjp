{
.appVersion = "3151";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = "M+  ";
},
{
name = panose;
value = (
2,
11,
6,
2,
2,
2,
3,
2,
2,
7
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
11,
24,
29,
30,
31,
32,
33,
35,
36,
37,
38,
39,
40,
42,
43,
44,
45,
46,
47,
48,
49,
50,
54,
57,
59,
61,
62,
65,
68,
89
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1253",
"1254",
"1255",
"1257",
"1258",
"932",
"950",
"bit 29",
"bit 30",
"869",
"866",
"865",
"863",
"862",
"861",
"860",
"857",
"855",
"852",
"775",
"737",
"850",
"437"
);
},
{
name = fsType;
value = (
);
}
);
date = "2015-05-28 17:07:45 +0000";
familyName = "Yaku Han RP";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature vert;
feature vrt2;
";
tag = aalt;
},
{
automatic = 1;
code = "sub comma-han by comma-han.vert;
sub period-han by period-han.vert;
sub colon.full by colon.full.vert;
sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vert;
},
{
automatic = 1;
code = "sub comma-han by comma-han.vert;
sub period-han by period-han.vert;
sub colon.full by colon.full.vert;
sub anglebracketleft by anglebracketleft.vert;
sub anglebracketright by anglebracketright.vert;
sub blacklenticularbracketleft by blacklenticularbracketleft.vert;
sub blacklenticularbracketright by blacklenticularbracketright.vert;
sub cornerbracketleft by cornerbracketleft.vert;
sub cornerbracketright by cornerbracketright.vert;
sub dblanglebracketleft by dblanglebracketleft.vert;
sub dblanglebracketright by dblanglebracketright.vert;
sub tortoiseshellbracketleft by tortoiseshellbracketleft.vert;
sub tortoiseshellbracketright by tortoiseshellbracketright.vert;
sub whitecornerbracketleft by whitecornerbracketleft.vert;
sub whitecornerbracketright by whitecornerbracketright.vert;
sub whitelenticularbracketleft by whitelenticularbracketleft.vert;
sub whitelenticularbracketright by whitelenticularbracketright.vert;
sub braceleft.full by braceleft.full.vert;
sub braceright.full by braceright.full.vert;
sub bracketleft.full by bracketleft.full.vert;
sub bracketright.full by bracketright.full.vert;
sub parenleft.full by parenleft.full.vert;
sub parenright.full by parenright.full.vert;
";
tag = vrt2;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 860;
},
{
name = typoDescender;
value = -140;
},
{
name = typoLineGap;
value = 90;
},
{
name = winAscent;
value = 1075;
},
{
name = winDescent;
value = 320;
},
{
name = hheaAscender;
value = 1075;
},
{
name = hheaDescender;
value = -320;
},
{
name = strikeoutPosition;
value = 258;
},
{
name = strikeoutSize;
value = 49;
},
{
name = "prep Table Assembly";
value = "PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SCANTYPE[ ]	/* ScanType */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01270 6 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012EIF[ ]	/* EndIf */\012SCVTCI[ ]	/* SetCVTCutIn */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP0[ ]	/* SetZonePointer0 */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01274 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012MIAP[1]	/* MoveIndirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10100]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012ROUND[01]	/* Round */\012RTG[ ]	/* RoundToGrid */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ROFF[ ]	/* RoundOff */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012IF[ ]	/* If */\012MIRP[11101]	/* MoveIndirectRelPt */\012ELSE[ ]	/* Else */\012MIRP[01101]	/* MoveIndirectRelPt */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01270 \012SROUND[ ]	/* SuperRound */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012MDRP[11101]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012GFV[ ]	/* GetFVector */\012NOT[ ]	/* LogicalNot */\012AND[ ]	/* LogicalAnd */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01234 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012NOT[ ]	/* LogicalNot */\012NOT[ ]	/* LogicalNot */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012MDRP[00100]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012MDRP[01101]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012ELSE[ ]	/* Else */\012SRP0[ ]	/* SetRefPoint0 */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SRP2[ ]	/* SetRefPoint2 */\012SRP1[ ]	/* SetRefPoint1 */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012NEG[ ]	/* Negate */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012RTDG[ ]	/* RoundToDoubleGrid */\012MDRP[10110]	/* MoveDirectRelPt */\012RTG[ ]	/* RoundToGrid */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012MD[0]	/* MeasureDistance */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10110]	/* MoveDirectRelPt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[0]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[11010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDRP[10010]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[1]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CALL[ ]	/* CallFunction */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ROUND[10]	/* Round */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DIV[ ]	/* Divide */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SPVTL[1]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012MDRP[00000]	/* MoveDirectRelPt */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 64 1 64 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0120 32 0 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0121 32 1 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01225 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    \"-220\",\012    0,\012    520,\012    730,\012    750,\012    33,\012    633\012)";
}
);
id = m01;
metricValues = (
{
pos = 860;
},
{
},
{
pos = -140;
},
{
}
);
name = Medium;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 364;
}
);
note = ".notdef";
},
{
glyphname = space;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 277;
}
);
note = space;
unicode = 32;
},
{
glyphname = nbspace;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
vertWidth = 1000;
width = 277;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = "comma-han";
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,-53,o),
(285,-38,qs),
(303,-24,o),
(309,22,o),
(294,40,qs),
(240,104,o),
(173,176,qs),
(157,193,o),
(111,196,o),
(93,180,qs),
(76,164,o),
(73,117,o),
(89,100,qs),
(157,24,o),
(203,-29,qs),
(219,-47,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3001;
unicode = 12289;
},
{
glyphname = "comma-han.vert";
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(886,523,o),
(905,538,qs),
(923,552,o),
(929,598,o),
(914,616,qs),
(860,680,o),
(793,752,qs),
(777,769,o),
(731,772,o),
(713,756,qs),
(696,740,o),
(693,693,o),
(709,676,qs),
(777,600,o),
(823,547,qs),
(839,529,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08466;
},
{
glyphname = "period-han";
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,39,o),
(245,-8,o),
(179,-8,o),
(132,39,o),
(132,105,o),
(179,152,o),
(245,152,o),
(292,105,o)
);
},
{
closed = 1;
nodes = (
(372,138,o),
(278,232,o),
(146,232,o),
(52,138,o),
(52,6,o),
(146,-88,o),
(278,-88,o),
(372,6,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3002;
unicode = 12290;
},
{
glyphname = "period-han.vert";
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(868,615,o),
(821,568,o),
(755,568,o),
(708,615,o),
(708,681,o),
(755,728,o),
(821,728,o),
(868,681,o)
);
},
{
closed = 1;
nodes = (
(948,714,o),
(854,808,o),
(722,808,o),
(628,714,o),
(628,582,o),
(722,488,o),
(854,488,o),
(948,582,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08467;
},
{
glyphname = "dot-kata";
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,285,o),
(575,319,o),
(575,342,qs),
(575,378,ls),
(575,401,o),
(541,435,o),
(518,435,qs),
(482,435,ls),
(459,435,o),
(425,401,o),
(425,378,qs),
(425,342,ls),
(425,319,o),
(459,285,o),
(482,285,qs),
(518,285,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni30FB;
unicode = 12539;
},
{
glyphname = hyphenationpoint;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,215,o),
(257,249,o),
(257,272,qs),
(257,308,ls),
(257,331,o),
(223,365,o),
(200,365,qs),
(184,365,ls),
(161,365,o),
(127,331,o),
(127,308,qs),
(127,272,ls),
(127,249,o),
(161,215,o),
(184,215,qs),
(200,215,ls)
);
}
);
vertWidth = 1000;
width = 384;
}
);
note = uni2027;
unicode = 8231;
},
{
glyphname = colon.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,70,o),
(565,104,o),
(565,127,qs),
(565,163,ls),
(565,186,o),
(531,220,o),
(508,220,qs),
(492,220,ls),
(469,220,o),
(435,186,o),
(435,163,qs),
(435,127,ls),
(435,104,o),
(469,70,o),
(492,70,qs),
(508,70,ls)
);
},
{
closed = 1;
nodes = (
(531,500,o),
(565,534,o),
(565,557,qs),
(565,593,ls),
(565,616,o),
(531,650,o),
(508,650,qs),
(492,650,ls),
(469,650,o),
(435,616,o),
(435,593,qs),
(435,557,ls),
(435,534,o),
(469,500,o),
(492,500,qs),
(508,500,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1A;
unicode = 65306;
},
{
glyphname = exclam.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(551,260,qs),
(563,673,ls),
(564,696,o),
(531,730,o),
(508,730,qs),
(492,730,ls),
(469,730,o),
(436,696,o),
(437,673,qs),
(449,260,ls),
(450,239,o),
(479,210,o),
(521,210,o),
(550,239,o)
);
},
{
closed = 1;
nodes = (
(474,130,o),
(440,96,o),
(440,73,qs),
(440,57,ls),
(440,34,o),
(474,0,o),
(497,0,qs),
(503,0,ls),
(526,0,o),
(560,34,o),
(560,57,qs),
(560,73,ls),
(560,96,o),
(526,130,o),
(503,130,qs),
(497,130,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF01;
unicode = 65281;
},
{
glyphname = question.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,648,qs),
(655,648,o),
(655,560,qs),
(655,538,o),
(640,502,o),
(603,468,o),
(579,450,o),
(551,432,qs),
(513,407,o),
(470,375,o),
(420,308,o),
(411,269,qs),
(406,248,o),
(437,215,o),
(460,215,qs),
(482,215,o),
(516,247,o),
(524,270,qs),
(533,297,o),
(575,345,o),
(610,371,o),
(642,391,qs),
(674,412,o),
(708,437,o),
(751,481,o),
(770,535,o),
(770,570,qs),
(770,647,o),
(632,740,o),
(505,740,qs),
(397,740,o),
(286,716,qs),
(266,711,o),
(246,678,o),
(254,640,o),
(287,620,o),
(306,625,qs),
(402,648,o)
);
},
{
closed = 1;
nodes = (
(400,96,o),
(400,73,qs),
(400,57,ls),
(400,34,o),
(434,0,o),
(457,0,qs),
(463,0,ls),
(486,0,o),
(520,34,o),
(520,57,qs),
(520,73,ls),
(520,96,o),
(486,130,o),
(463,130,qs),
(457,130,ls),
(434,130,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1F;
unicode = 65311;
},
{
glyphname = semicolon.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,6,qs),
(558,168,ls),
(566,187,o),
(543,220,o),
(523,220,qs),
(497,220,ls),
(472,220,o),
(432,189,o),
(425,165,qs),
(383,8,ls),
(378,-10,o),
(401,-40,o),
(420,-40,qs),
(469,-40,o)
);
},
{
closed = 1;
nodes = (
(440,616,o),
(440,593,qs),
(440,557,ls),
(440,534,o),
(474,500,o),
(497,500,qs),
(513,500,ls),
(536,500,o),
(570,534,o),
(570,557,qs),
(570,593,ls),
(570,616,o),
(536,650,o),
(513,650,qs),
(497,650,ls),
(474,650,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF1B;
unicode = 65307;
},
{
glyphname = colon.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,70,o),
(565,104,o),
(565,127,qs),
(565,163,ls),
(565,186,o),
(531,220,o),
(508,220,qs),
(492,220,ls),
(469,220,o),
(435,186,o),
(435,163,qs),
(435,127,ls),
(435,104,o),
(469,70,o),
(492,70,qs),
(508,70,ls)
);
},
{
closed = 1;
nodes = (
(531,500,o),
(565,534,o),
(565,557,qs),
(565,593,ls),
(565,616,o),
(531,650,o),
(508,650,qs),
(492,650,ls),
(469,650,o),
(435,616,o),
(435,593,qs),
(435,557,ls),
(435,534,o),
(469,500,o),
(492,500,qs),
(508,500,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08518;
},
{
glyphname = angleLeft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,-155,o),
(342,-155,qs),
(360,-155,o),
(378,-124,o),
(370,-108,q),
(132,300,ls),
(127,308,o),
(132,315,q),
(370,723,l),
(378,739,o),
(360,770,o),
(342,770,qs),
(316,770,o),
(272,745,o),
(260,723,qs),
(46,356,ls),
(32,334,o),
(32,282,o),
(46,259,qs),
(260,-108,ls),
(272,-130,o)
);
}
);
vertWidth = 1000;
width = 411;
}
);
note = angleleft;
unicode = 9001;
},
{
glyphname = angleRight;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,-155,o),
(69,-155,qs),
(95,-155,o),
(138,-130,o),
(151,-108,qs),
(365,259,ls),
(379,282,o),
(379,334,o),
(365,356,qs),
(151,722,ls),
(138,744,o),
(94,770,o),
(69,770,qs),
(51,770,o),
(32,738,o),
(41,722,qs),
(279,315,l),
(284,308,o),
(279,300,qs),
(41,-108,ls),
(32,-124,o)
);
}
);
vertWidth = 1000;
width = 411;
}
);
note = angleright;
unicode = 9002;
},
{
glyphname = anglebracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(850,-102,qs),
(868,-102,o),
(886,-71,o),
(877,-55,qs),
(639,353,ls),
(635,360,o),
(639,367,qs),
(877,775,ls),
(886,791,o),
(868,823,o),
(850,823,qs),
(795,823,o),
(767,775,qs),
(554,409,ls),
(525,360,o),
(554,311,qs),
(767,-55,ls),
(795,-102,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3008;
unicode = 12296;
},
{
glyphname = anglebracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,791,o),
(123,775,qs),
(361,367,ls),
(365,360,o),
(361,353,qs),
(123,-55,ls),
(114,-71,o),
(132,-102,o),
(150,-102,qs),
(205,-102,o),
(233,-55,qs),
(446,311,ls),
(475,360,o),
(446,409,qs),
(233,775,ls),
(205,822,o),
(150,822,qs),
(132,822,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3009;
unicode = 12297;
},
{
glyphname = blacklenticularbracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(864,-102,o),
(876,-73,o),
(865,-61,qs),
(788,26,o),
(705,245,o),
(705,475,o),
(788,694,o),
(865,781,qs),
(876,793,o),
(864,822,o),
(848,822,qs),
(657,822,ls),
(634,822,o),
(600,789,o),
(600,766,qs),
(600,-46,ls),
(600,-69,o),
(634,-102,o),
(657,-102,qs),
(848,-102,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3010;
unicode = 12304;
},
{
glyphname = blacklenticularbracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,-102,o),
(400,-69,o),
(400,-46,qs),
(400,766,ls),
(400,789,o),
(366,822,o),
(343,822,qs),
(152,822,ls),
(136,822,o),
(124,793,o),
(135,781,qs),
(212,694,o),
(295,475,o),
(295,245,o),
(212,26,o),
(135,-61,qs),
(124,-73,o),
(136,-102,o),
(152,-102,qs),
(343,-102,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3011;
unicode = 12305;
},
{
glyphname = braceleft.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(665,455,o),
(665,518,qs),
(665,638,ls),
(665,704,o),
(703,742,o),
(760,742,qs),
(850,742,ls),
(866,742,o),
(890,766,o),
(890,798,o),
(866,822,o),
(850,822,qs),
(710,822,ls),
(633,822,o),
(565,751,o),
(565,668,qs),
(565,522,ls),
(565,402,o),
(480,402,qs),
(452,402,ls),
(435,402,o),
(410,377,o),
(410,343,o),
(435,318,o),
(452,318,qs),
(480,318,ls),
(565,318,o),
(565,198,qs),
(565,52,ls),
(565,-31,o),
(633,-102,o),
(710,-102,qs),
(850,-102,ls),
(866,-102,o),
(890,-78,o),
(890,-46,o),
(866,-22,o),
(850,-22,qs),
(760,-22,ls),
(703,-22,o),
(665,16,o),
(665,82,qs),
(665,202,ls),
(665,265,o),
(622,336,o),
(572,358,q),
(570,358,o),
(570,362,o),
(572,362,q),
(622,384,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF5B;
unicode = 65371;
},
{
glyphname = braceright.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,265,o),
(335,202,qs),
(335,82,ls),
(335,16,o),
(297,-22,o),
(240,-22,qs),
(150,-22,ls),
(134,-22,o),
(110,-46,o),
(110,-78,o),
(134,-102,o),
(150,-102,qs),
(290,-102,ls),
(367,-102,o),
(435,-31,o),
(435,52,qs),
(435,198,ls),
(435,318,o),
(520,318,qs),
(548,318,ls),
(565,318,o),
(590,343,o),
(590,377,o),
(565,402,o),
(548,402,qs),
(520,402,ls),
(435,402,o),
(435,522,qs),
(435,668,ls),
(435,751,o),
(367,822,o),
(290,822,qs),
(150,822,ls),
(134,822,o),
(110,798,o),
(110,766,o),
(134,742,o),
(150,742,qs),
(240,742,ls),
(297,742,o),
(335,704,o),
(335,638,qs),
(335,518,ls),
(335,455,o),
(378,384,o),
(428,362,q),
(430,362,o),
(430,358,o),
(428,358,q),
(378,336,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF5D;
unicode = 65373;
},
{
glyphname = cornerbracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(635,115,qs),
(635,731,ls),
(635,740,o),
(644,740,qs),
(892,740,ls),
(909,740,o),
(935,765,o),
(935,799,o),
(909,825,o),
(892,825,qs),
(592,825,ls),
(569,825,o),
(535,791,o),
(535,768,qs),
(535,115,ls),
(535,94,o),
(564,65,o),
(606,65,o),
(635,94,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300C;
unicode = 12300;
},
{
glyphname = cornerbracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,-105,o),
(465,-71,o),
(465,-48,qs),
(465,605,ls),
(465,626,o),
(436,655,o),
(394,655,o),
(365,626,o),
(365,605,qs),
(365,-11,ls),
(365,-20,o),
(356,-20,qs),
(108,-20,ls),
(91,-20,o),
(65,-45,o),
(65,-79,o),
(91,-105,o),
(108,-105,qs),
(408,-105,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300D;
unicode = 12301;
},
{
glyphname = dblanglebracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(869,822,o),
(852,822,qs),
(800,822,o),
(774,777,qs),
(559,409,ls),
(530,360,o),
(559,311,qs),
(774,-57,ls),
(800,-102,o),
(852,-102,qs),
(869,-102,o),
(888,-72,o),
(879,-57,qs),
(639,353,ls),
(635,360,o),
(639,367,qs),
(879,777,ls),
(888,792,o)
);
},
{
closed = 1;
nodes = (
(682,-102,qs),
(699,-102,o),
(718,-72,o),
(709,-57,qs),
(469,353,ls),
(465,360,o),
(469,367,qs),
(709,777,ls),
(718,792,o),
(699,822,o),
(682,822,qs),
(630,822,o),
(604,777,qs),
(389,409,ls),
(360,360,o),
(389,311,qs),
(604,-57,ls),
(630,-102,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300A;
unicode = 12298;
},
{
glyphname = dblanglebracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,822,o),
(148,822,qs),
(131,822,o),
(112,792,o),
(121,777,qs),
(361,367,ls),
(365,360,o),
(361,353,qs),
(121,-57,ls),
(112,-72,o),
(131,-102,o),
(148,-102,qs),
(200,-102,o),
(226,-57,qs),
(441,311,ls),
(470,360,o),
(441,409,qs),
(226,777,ls)
);
},
{
closed = 1;
nodes = (
(282,792,o),
(291,777,qs),
(531,367,ls),
(535,360,o),
(531,353,qs),
(291,-57,ls),
(282,-72,o),
(301,-102,o),
(318,-102,qs),
(370,-102,o),
(396,-57,qs),
(611,311,ls),
(640,360,o),
(611,409,qs),
(396,777,ls),
(370,822,o),
(318,822,qs),
(301,822,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300B;
unicode = 12299;
},
{
glyphname = tortoiseshellbracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(855,-100,o),
(880,-82,o),
(880,-66,qs),
(880,-47,o),
(858,-16,o),
(840,-11,qs),
(618,58,ls),
(610,61,o),
(610,69,qs),
(610,651,ls),
(610,659,o),
(618,662,qs),
(840,731,ls),
(858,736,o),
(880,767,o),
(880,786,qs),
(880,802,o),
(855,820,o),
(840,815,qs),
(564,729,ls),
(540,721,o),
(510,681,o),
(510,656,qs),
(510,64,ls),
(510,39,o),
(540,-1,o),
(564,-9,qs),
(840,-95,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3014;
unicode = 12308;
},
{
glyphname = tortoiseshellbracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,-16,o),
(120,-47,o),
(120,-66,qs),
(120,-82,o),
(145,-100,o),
(160,-95,qs),
(436,-9,ls),
(460,-1,o),
(490,39,o),
(490,64,qs),
(490,656,ls),
(490,681,o),
(460,721,o),
(436,729,qs),
(160,815,ls),
(145,820,o),
(120,802,o),
(120,786,qs),
(120,767,o),
(142,736,o),
(160,731,qs),
(382,662,ls),
(390,659,o),
(390,651,qs),
(390,69,ls),
(390,61,o),
(382,58,qs),
(160,-11,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3015;
unicode = 12309;
},
{
glyphname = whitecornerbracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(564,765,qs),
(866,765,ls),
(875,765,o),
(875,756,qs),
(875,698,ls),
(875,690,o),
(866,690,qs),
(687,690,ls),
(664,690,o),
(630,656,o),
(630,633,qs),
(630,94,ls),
(630,85,o),
(622,85,qs),
(564,85,ls),
(555,85,o),
(555,94,qs),
(555,756,ls),
(555,765,o)
);
},
{
closed = 1;
nodes = (
(633,25,ls),
(656,25,o),
(690,59,o),
(690,82,qs),
(690,621,ls),
(690,630,o),
(699,630,qs),
(878,630,ls),
(901,630,o),
(935,664,o),
(935,687,qs),
(935,768,ls),
(935,791,o),
(901,825,o),
(878,825,qs),
(552,825,ls),
(529,825,o),
(495,791,o),
(495,768,qs),
(495,82,ls),
(495,59,o),
(529,25,o),
(552,25,qs),
(555,25,l)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300E;
unicode = 12302;
},
{
glyphname = whitecornerbracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,30,qs),
(313,30,ls),
(336,30,o),
(370,64,o),
(370,87,qs),
(370,626,ls),
(370,635,o),
(379,635,qs),
(436,635,ls),
(445,635,o),
(445,626,qs),
(445,-36,ls),
(445,-45,o),
(436,-45,qs),
(134,-45,ls),
(125,-45,o),
(125,-36,qs),
(125,21,ls),
(125,30,o)
);
},
{
closed = 1;
nodes = (
(471,-105,o),
(505,-71,o),
(505,-48,qs),
(505,638,ls),
(505,661,o),
(471,695,o),
(448,695,qs),
(445,695,l),
(367,695,ls),
(344,695,o),
(310,661,o),
(310,638,qs),
(310,99,ls),
(310,90,o),
(301,90,qs),
(122,90,ls),
(99,90,o),
(65,56,o),
(65,33,qs),
(65,-48,ls),
(65,-71,o),
(99,-105,o),
(122,-105,qs),
(448,-105,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni300F;
unicode = 12303;
},
{
glyphname = whitelenticularbracketleft;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(609,762,qs),
(780,762,ls),
(788,762,o),
(784,756,qs),
(665,576,o),
(665,144,o),
(784,-36,qs),
(788,-42,o),
(780,-42,qs),
(609,-42,ls),
(600,-42,o),
(600,-34,qs),
(600,754,ls),
(600,762,o)
);
},
{
closed = 1;
nodes = (
(865,-102,o),
(878,-73,o),
(868,-60,qs),
(799,27,o),
(725,245,o),
(725,475,o),
(799,693,o),
(868,780,qs),
(878,793,o),
(865,822,o),
(848,822,qs),
(597,822,ls),
(574,822,o),
(540,789,o),
(540,766,qs),
(540,-46,ls),
(540,-69,o),
(574,-102,o),
(597,-102,qs),
(848,-102,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3016;
unicode = 12310;
},
{
glyphname = whitelenticularbracketright;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,576,o),
(216,756,qs),
(212,762,o),
(220,762,qs),
(392,762,ls),
(400,762,o),
(400,754,qs),
(400,-34,ls),
(400,-43,o),
(392,-43,qs),
(220,-43,ls),
(217,-43,o),
(214,-38,o),
(216,-36,q),
(335,144,o)
);
},
{
closed = 1;
nodes = (
(426,-102,o),
(460,-69,o),
(460,-46,qs),
(460,766,ls),
(460,789,o),
(426,822,o),
(403,822,qs),
(152,822,ls),
(135,822,o),
(122,793,o),
(132,780,qs),
(201,693,o),
(275,475,o),
(275,245,o),
(201,27,o),
(132,-60,qs),
(122,-73,o),
(135,-102,o),
(152,-102,qs),
(403,-102,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uni3017;
unicode = 12311;
},
{
glyphname = anglebracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,10,qs),
(38,-8,o),
(69,-26,o),
(85,-17,qs),
(493,221,ls),
(500,225,o),
(507,221,qs),
(915,-17,ls),
(931,-26,o),
(963,-8,o),
(963,10,qs),
(963,65,o),
(915,93,qs),
(549,306,ls),
(500,335,o),
(451,306,qs),
(85,93,ls),
(38,65,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08468;
},
{
glyphname = anglebracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(931,746,o),
(915,737,qs),
(507,499,ls),
(500,495,o),
(493,499,qs),
(85,737,ls),
(69,746,o),
(38,728,o),
(38,710,qs),
(38,655,o),
(85,627,qs),
(451,414,ls),
(500,385,o),
(549,414,qs),
(915,627,ls),
(962,655,o),
(962,710,qs),
(962,728,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08469;
},
{
glyphname = blacklenticularbracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,-4,o),
(67,-16,o),
(79,-5,qs),
(166,72,o),
(385,155,o),
(615,155,o),
(834,72,o),
(921,-5,qs),
(933,-16,o),
(962,-4,o),
(962,12,qs),
(962,203,ls),
(962,226,o),
(929,260,o),
(906,260,qs),
(94,260,ls),
(71,260,o),
(38,226,o),
(38,203,qs),
(38,12,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08476;
},
{
glyphname = blacklenticularbracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,494,o),
(71,460,o),
(94,460,qs),
(906,460,ls),
(929,460,o),
(962,494,o),
(962,517,qs),
(962,708,ls),
(962,724,o),
(933,736,o),
(921,725,qs),
(834,648,o),
(615,565,o),
(385,565,o),
(166,648,o),
(79,725,qs),
(67,736,o),
(38,724,o),
(38,708,qs),
(38,517,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08477;
},
{
glyphname = bracketleft.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(856,-102,o),
(880,-78,o),
(880,-46,o),
(856,-22,o),
(840,-22,qs),
(619,-22,ls),
(610,-22,o),
(610,-14,qs),
(610,734,ls),
(610,743,o),
(619,743,qs),
(840,743,ls),
(856,743,o),
(880,766,o),
(880,800,o),
(856,823,o),
(840,823,qs),
(567,823,ls),
(544,823,o),
(510,789,o),
(510,766,qs),
(510,-46,ls),
(510,-69,o),
(544,-102,o),
(567,-102,qs),
(840,-102,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF3B;
unicode = 65339;
},
{
glyphname = bracketright.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,-22,o),
(120,-46,o),
(120,-78,o),
(144,-102,o),
(160,-102,qs),
(433,-102,ls),
(456,-102,o),
(490,-69,o),
(490,-46,qs),
(490,766,ls),
(490,789,o),
(456,822,o),
(433,822,qs),
(160,822,ls),
(144,822,o),
(120,798,o),
(120,766,o),
(144,742,o),
(160,742,qs),
(381,742,ls),
(390,742,o),
(390,734,qs),
(390,-14,ls),
(390,-22,o),
(381,-22,qs),
(160,-22,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF3D;
unicode = 65341;
},
{
glyphname = cornerbracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,225,qs),
(871,225,ls),
(880,225,o),
(880,216,qs),
(880,-32,ls),
(880,-49,o),
(905,-75,o),
(939,-75,o),
(965,-49,o),
(965,-32,qs),
(965,268,ls),
(965,291,o),
(931,325,o),
(908,325,qs),
(255,325,ls),
(234,325,o),
(205,296,o),
(205,254,o),
(234,225,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08472;
},
{
glyphname = cornerbracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,429,o),
(69,395,o),
(92,395,qs),
(745,395,ls),
(766,395,o),
(795,424,o),
(795,466,o),
(766,495,o),
(745,495,qs),
(129,495,ls),
(120,495,o),
(120,504,qs),
(120,752,ls),
(120,769,o),
(95,795,o),
(61,795,o),
(35,769,o),
(35,752,qs),
(35,452,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08473;
},
{
glyphname = dblanglebracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(962,-9,o),
(962,8,qs),
(962,60,o),
(917,86,qs),
(549,301,ls),
(500,330,o),
(451,301,qs),
(83,86,ls),
(38,60,o),
(38,8,qs),
(38,-9,o),
(68,-28,o),
(83,-19,qs),
(493,221,ls),
(500,225,o),
(507,221,qs),
(917,-19,ls),
(932,-28,o)
);
},
{
closed = 1;
nodes = (
(38,178,qs),
(38,161,o),
(68,142,o),
(83,151,qs),
(493,391,ls),
(500,395,o),
(507,391,qs),
(917,151,ls),
(932,142,o),
(962,161,o),
(962,178,qs),
(962,230,o),
(917,256,qs),
(549,471,ls),
(500,500,o),
(451,471,qs),
(83,256,ls),
(38,230,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08470;
},
{
glyphname = dblanglebracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(962,660,o),
(962,712,qs),
(962,729,o),
(932,748,o),
(917,739,qs),
(507,499,ls),
(500,495,o),
(493,499,qs),
(83,739,ls),
(68,748,o),
(38,729,o),
(38,712,qs),
(38,660,o),
(83,634,qs),
(451,419,ls),
(500,390,o),
(549,419,qs),
(917,634,ls)
);
},
{
closed = 1;
nodes = (
(932,578,o),
(917,569,qs),
(507,329,ls),
(500,325,o),
(493,329,qs),
(83,569,ls),
(68,578,o),
(38,559,o),
(38,542,qs),
(38,490,o),
(83,464,qs),
(451,249,ls),
(500,220,o),
(549,249,qs),
(917,464,ls),
(962,490,o),
(962,542,qs),
(962,559,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08471;
},
{
glyphname = parenleft.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(867,-77,o),
(858,-68,qs),
(680,112,o),
(680,608,o),
(858,788,qs),
(868,798,o),
(858,822,o),
(845,822,qs),
(791,822,o),
(757,788,qs),
(669,702,o),
(575,482,o),
(575,238,o),
(669,18,o),
(757,-68,qs),
(791,-102,o),
(845,-102,qs),
(857,-102,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF08;
unicode = 65288;
},
{
glyphname = parenright.full;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,-68,qs),
(331,18,o),
(425,238,o),
(425,482,o),
(331,702,o),
(243,788,qs),
(209,822,o),
(155,822,qs),
(143,822,o),
(133,797,o),
(142,788,qs),
(320,608,o),
(320,112,o),
(142,-68,qs),
(132,-78,o),
(142,-102,o),
(155,-102,qs),
(209,-102,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = uniFF09;
unicode = 65289;
},
{
glyphname = tortoiseshellbracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,5,o),
(58,-20,o),
(74,-20,qs),
(93,-20,o),
(124,2,o),
(129,20,qs),
(198,242,ls),
(201,250,o),
(209,250,qs),
(791,250,ls),
(799,250,o),
(802,242,qs),
(871,20,ls),
(876,2,o),
(907,-20,o),
(926,-20,qs),
(942,-20,o),
(960,5,o),
(955,20,qs),
(869,296,ls),
(861,320,o),
(821,350,o),
(796,350,qs),
(204,350,ls),
(179,350,o),
(139,320,o),
(131,296,qs),
(45,20,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08479;
},
{
glyphname = tortoiseshellbracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,718,o),
(93,740,o),
(74,740,qs),
(58,740,o),
(40,715,o),
(45,700,qs),
(131,424,ls),
(139,400,o),
(179,370,o),
(204,370,qs),
(796,370,ls),
(821,370,o),
(861,400,o),
(869,424,qs),
(955,700,ls),
(960,715,o),
(942,740,o),
(926,740,qs),
(907,740,o),
(876,718,o),
(871,700,qs),
(802,478,ls),
(799,470,o),
(791,470,qs),
(209,470,ls),
(201,470,o),
(198,478,qs),
(129,700,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08480;
},
{
glyphname = whitecornerbracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(905,296,qs),
(905,-6,ls),
(905,-15,o),
(896,-15,qs),
(838,-15,ls),
(830,-15,o),
(830,-6,qs),
(830,173,ls),
(830,196,o),
(796,230,o),
(773,230,qs),
(234,230,ls),
(225,230,o),
(225,238,qs),
(225,296,ls),
(225,305,o),
(234,305,qs),
(896,305,ls),
(905,305,o)
);
},
{
closed = 1;
nodes = (
(165,227,ls),
(165,204,o),
(199,170,o),
(222,170,qs),
(761,170,ls),
(770,170,o),
(770,161,qs),
(770,-18,ls),
(770,-41,o),
(804,-75,o),
(827,-75,qs),
(908,-75,ls),
(931,-75,o),
(965,-41,o),
(965,-18,qs),
(965,308,ls),
(965,331,o),
(931,365,o),
(908,365,qs),
(222,365,ls),
(199,365,o),
(165,331,o),
(165,308,qs),
(165,305,l)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08474;
},
{
glyphname = whitecornerbracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,726,qs),
(170,547,ls),
(170,524,o),
(204,490,o),
(227,490,qs),
(766,490,ls),
(775,490,o),
(775,481,qs),
(775,424,ls),
(775,415,o),
(766,415,qs),
(104,415,ls),
(95,415,o),
(95,424,qs),
(95,726,ls),
(95,735,o),
(104,735,qs),
(161,735,ls),
(170,735,o)
);
},
{
closed = 1;
nodes = (
(35,389,o),
(69,355,o),
(92,355,qs),
(778,355,ls),
(801,355,o),
(835,389,o),
(835,412,qs),
(835,415,l),
(835,493,ls),
(835,516,o),
(801,550,o),
(778,550,qs),
(239,550,ls),
(230,550,o),
(230,559,qs),
(230,738,ls),
(230,761,o),
(196,795,o),
(173,795,qs),
(92,795,ls),
(69,795,o),
(35,761,o),
(35,738,qs),
(35,412,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08475;
},
{
glyphname = whitelenticularbracketleft.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(902,251,qs),
(902,80,ls),
(902,72,o),
(896,76,qs),
(716,195,o),
(284,195,o),
(104,76,qs),
(98,72,o),
(98,80,qs),
(98,251,ls),
(98,260,o),
(106,260,qs),
(894,260,ls),
(902,260,o)
);
},
{
closed = 1;
nodes = (
(38,-5,o),
(67,-18,o),
(80,-8,qs),
(167,61,o),
(385,135,o),
(615,135,o),
(833,61,o),
(920,-8,qs),
(933,-18,o),
(962,-5,o),
(962,12,qs),
(962,263,ls),
(962,286,o),
(929,320,o),
(906,320,qs),
(94,320,ls),
(71,320,o),
(38,286,o),
(38,263,qs),
(38,12,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08481;
},
{
glyphname = whitelenticularbracketright.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(716,525,o),
(896,644,qs),
(902,648,o),
(902,640,qs),
(902,468,ls),
(902,460,o),
(894,460,qs),
(106,460,ls),
(97,460,o),
(97,468,qs),
(97,640,ls),
(97,643,o),
(102,646,o),
(104,644,q),
(284,525,o)
);
},
{
closed = 1;
nodes = (
(38,434,o),
(71,400,o),
(94,400,qs),
(906,400,ls),
(929,400,o),
(962,434,o),
(962,457,qs),
(962,708,ls),
(962,725,o),
(933,738,o),
(920,728,qs),
(833,659,o),
(615,585,o),
(385,585,o),
(167,659,o),
(80,728,qs),
(67,738,o),
(38,725,o),
(38,708,qs),
(38,457,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08482;
},
{
glyphname = braceleft.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,195,o),
(658,195,qs),
(778,195,ls),
(844,195,o),
(882,157,o),
(882,100,qs),
(882,10,ls),
(882,-6,o),
(906,-30,o),
(938,-30,o),
(962,-6,o),
(962,10,qs),
(962,150,ls),
(962,227,o),
(891,295,o),
(808,295,qs),
(662,295,ls),
(542,295,o),
(542,380,qs),
(542,408,ls),
(542,425,o),
(517,450,o),
(483,450,o),
(458,425,o),
(458,408,qs),
(458,380,ls),
(458,295,o),
(338,295,qs),
(192,295,ls),
(109,295,o),
(38,227,o),
(38,150,qs),
(38,10,ls),
(38,-6,o),
(62,-30,o),
(94,-30,o),
(118,-6,o),
(118,10,qs),
(118,100,ls),
(118,157,o),
(156,195,o),
(222,195,qs),
(342,195,ls),
(405,195,o),
(476,238,o),
(498,288,q),
(498,290,o),
(502,290,o),
(502,288,q),
(524,238,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08522;
},
{
glyphname = braceright.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,525,o),
(342,525,qs),
(222,525,ls),
(156,525,o),
(118,563,o),
(118,620,qs),
(118,710,ls),
(118,726,o),
(94,750,o),
(62,750,o),
(38,726,o),
(38,710,qs),
(38,570,ls),
(38,493,o),
(109,425,o),
(192,425,qs),
(338,425,ls),
(458,425,o),
(458,340,qs),
(458,312,ls),
(458,295,o),
(483,270,o),
(517,270,o),
(542,295,o),
(542,312,qs),
(542,340,ls),
(542,425,o),
(662,425,qs),
(808,425,ls),
(891,425,o),
(962,493,o),
(962,570,qs),
(962,710,ls),
(962,726,o),
(938,750,o),
(906,750,o),
(882,726,o),
(882,710,qs),
(882,620,ls),
(882,563,o),
(844,525,o),
(778,525,qs),
(658,525,ls),
(595,525,o),
(524,482,o),
(502,432,q),
(502,430,o),
(498,430,o),
(498,432,q),
(476,482,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08523;
},
{
glyphname = bracketleft.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,4,o),
(62,-20,o),
(94,-20,o),
(118,4,o),
(118,20,qs),
(118,241,ls),
(118,250,o),
(126,250,qs),
(874,250,ls),
(883,250,o),
(883,241,qs),
(883,20,ls),
(883,4,o),
(906,-20,o),
(940,-20,o),
(963,4,o),
(963,20,qs),
(963,293,ls),
(963,316,o),
(929,350,o),
(906,350,qs),
(94,350,ls),
(71,350,o),
(38,316,o),
(38,293,qs),
(38,20,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08520;
},
{
glyphname = bracketright.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,716,o),
(94,740,o),
(62,740,o),
(38,716,o),
(38,700,qs),
(38,427,ls),
(38,404,o),
(71,370,o),
(94,370,qs),
(906,370,ls),
(929,370,o),
(962,404,o),
(962,427,qs),
(962,700,ls),
(962,716,o),
(938,740,o),
(906,740,o),
(882,716,o),
(882,700,qs),
(882,479,ls),
(882,470,o),
(874,470,qs),
(126,470,ls),
(118,470,o),
(118,479,qs),
(118,700,ls)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08521;
},
{
glyphname = parenleft.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,-7,o),
(72,2,qs),
(252,180,o),
(748,180,o),
(928,2,qs),
(938,-8,o),
(962,2,o),
(962,15,qs),
(962,69,o),
(928,103,qs),
(842,191,o),
(622,285,o),
(378,285,o),
(158,191,o),
(72,103,qs),
(38,69,o),
(38,15,qs),
(38,3,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08516;
},
{
glyphname = parenright.full.vert;
lastChange = "2023-08-27 07:25:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,617,qs),
(158,529,o),
(378,435,o),
(622,435,o),
(842,529,o),
(928,617,qs),
(962,651,o),
(962,705,qs),
(962,717,o),
(937,727,o),
(928,718,qs),
(748,540,o),
(252,540,o),
(72,718,qs),
(62,728,o),
(38,718,o),
(38,705,qs),
(38,651,o)
);
}
);
vertWidth = 1000;
width = 1000;
}
);
note = glyph08517;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Medium;
properties = (
{
key = postscriptFullName;
value = "Yaku Han RP Medium";
},
{
key = postscriptFontName;
value = "YakuHanRP-Medium";
}
);
weightClass = 500;
}
);
metrics = (
{
type = ascender;
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2016 The Rounded M+ Project Authors.";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "http://jikasei.me/";
}
);
settings = {
disablesAutomaticAlignment = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 59;
}
